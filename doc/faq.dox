/**

\page faq FAQ
\tableofcontents

\section hardware_fe Frontend and Hardware

1. _How to I add or remove a detector signal from the trigger?_

  For both the head and tail, the trigger is an `OR` of IO32 ECL inputs 0-7. Each of these inputs is masked
	by an IO32 register that is controlled through ODB variables. So, to add or remove a detector signal from
	the trigger, first identify which ECL channel the signal in question is plugged into. It should be one of
	the first eight channels on the LeCroy NIM->ECL converter labeled with "trigger + scalers" or "IO32".
  Once you have identified the channel in question, edit the corresponding ODB variable
	`/Equipment/xxxxVME/Settings/IO32/ChannelEnable[n]`, where `xxxx` is either `Head` or `Tail`, and `n` is the
	channel number in question (note that the NIM->ECL converters are labeled starting with 1, whereas the ODB
	variables start at 0). Setting the `ChannelEnable[n]` variable to `y` adds the signal to the trigger, while
	`n` removes it.

	You can look here: http://trshare.triumf.ca/~gchristian/dragon/frontend/html/hardware.html#ecl_in for a listing
	of which detectors are plugged into which ECL channels.
	.
2. _What are all those signals going into and out of the IO32?_

  See the following page:	http://trshare.triumf.ca/~gchristian/dragon/frontend/html/hardware.html for an overview
	of the signals originating from and going into the IO32.
	.
3. _What about the scalers?_

  Scaler inputs are discussed at http://trshare.triumf.ca/~gchristian/dragon/frontend/html/hardware.html#scalers
	.
4. _What about other signals? Is there a drawing of what goes where?_

  Currently, there isn't a full drawing of all connections, but it is on the to-do list. In the meantime,
	you can refer to the <a href=http://trshare.triumf.ca/~gchristian/dragon/frontend/html/hardware.html>
	hardware</a> and <a href=http://trshare.triumf.ca/~gchristian/dragon/frontend/html/trigger.html>
	trigger logic</a> pages to get an idea of what the signals are for and what the various inputs/outputs
	to the VME modules are. Nearly everything else in the setup, electronics wise, (i.e. all of the NIM
	modules) is pretty sparse and hopefully can be figured out from cable tracing.

	There is also a <a href=http://trshare.triumf.ca/~gchristian/dragon/frontend/html/hardware.html#adc_in>
	section of the hardware page</a> giving the channel mapping for ADCs and TDCs.
	.
5. _How to I operate the new frontend?_

  See the operation guide at http://trshare.triumf.ca/~gchristian/dragon/frontend/html/operation.html
	.
6. _What parts of the frontend are configurable? How do I control it?_

  Most of the frontend options (gate widths, delays, etc.) are controlled by ODB variables.
	See the operation guide http://trshare.triumf.ca/~gchristian/dragon/frontend/html/operation.html
	for more information.
	.
7. _How do I adjust BGO thresholds?_

  From the <a href=smaug.triumf.ca:8081>MIDAS status page</a>, first click the `Adjust BGO Thresholds` button.
	Then change the `Threshold Gamma Energy` variable to the desired threshold energy in keV. Now go back to the
	status page and click `Apply BGO Thresholds` to make the change. Finally, start a new run for the new
	threshold values to take effect.

	Note that this only sets the correct keV threshold when the array is gain matched in the standard manner, that
	is, placing the 6.13 MeV <SUP>13</SUP>C peak at channel 1471 (or 6.13 MeV using the standard ADC slopes of 0.00415).
	For alternative gain matching, the relationship between threshold value and keV will need to be figured out empirically.


\section panic "Panic" Instructions / Help

1. _MIDAS got hung up when I tried to start or stop a run._

  Open up a shell, ssh into smaug (`ssh dragon@smaug`) and then run the command `odbedit`. Once in this program,
  issue the command `stop now -v` (or `start now -v`). The this may solve the problem on it's own, but if not you
  should see from the output where the transition is getting hung up. If so, kill the offending program and try again
  to start/stop the run. Then try re-starting the program you killed, and then try starting a new run to see if the
  problem is fixed. If there are still problems, more drastic measures may be necessary (see below).
  .
2. _Program xyz has crashed/hung and it's affecting the data taking._

  MIDAS is supposed to have a built in "watchdog" system for removing any crashed programs from the experiment so
  that they cannot influence the data taking. However, if a program has registered start or stop transitions and has
  become hung but not fully crashed, it can block the stopping or starting of runs. If this is the case, you will want
  to kill the offending program manually. ssh into the host machine running the program and type:

       ps ux | grep program_name

  to find out the process ID.  Then type `kill xxxxxx`, where `xxxxxx` is the process ID. If this doesn't work,
  try again with `kill -9 xxxxxx`. Once you have killed the program, the data taking should work again; however,
  you may want to do a stop run/start run cycle to re-set things.
  .
3. _Program xyz won't stay open._

  If a program refuses to start from the MIDAS programs page, click on the link on the left side of the page
  and look at the "Start command" section to see what the command is to start the program. Then try running
  this in a shell, removing any "-D" flags. This may not get the program to start, but at least the extra
  terminal output can point you in the right direction towards figuring out the problem.
  .
4. _I tried to submit an elog entry and it got hung up._

  We have noticed that occasionally certain attachments can cause an elog entry to become hung. If this
	happens to you, first try to copy the entry text to the clipboard or another program so that you don't
	have to re-type everything. Then close the browser window/tab in which you have tried to submit the
	elog entry. This should fix the hang-up, but your entry may be missing. If so, re-submit without the
	attachments. Then try to edit the entry and if the attachment still refuses to upload, you can try
	breaking it into multiple smaller files (by area) as this seems to fix things. As a last resoort, you
	can just reference the location of the attachment on `draco` and interested readers can go find it
	manually.
	.
5. _The MIDAS status page is spewing errors and I have no idea what they mean._

  As long as the errors are not coming from one of the frontends (fe_head, fe_tail) then it is likely something
	non-cricual (probably a bug in one of the analysis codes). In this case, it is not worth stopping data-taking
	to investigate. If the errors are swamping the MDIAS message system, close the offending client until someone
	who can debug the problem is around.

	If you are getting the occational error from one of the frontends about "V792 trigger problem", then this
	is a known, albeit not fully understood issue. You can continue to safely take data if this is the case.
	.
6. _Something isn't working and I have no idea what's going on!_

  For DAQ problems where the source is unknown, the standard procedure is to do the following:

    1. Kill and re-start all programs by logging into `smaug` and typing the command `start_daq.sh`.
       As a second step, double check that none of the frontend programs (fe_head, fe_tail, fewiener,
			 feepics) are running more than one instance: log into the appropriate host (this will be noted
			 from the link on the MIDAS programs page) and do `ps ux | grep program_name`; there should be
			 only one instance of the program running. If there is more than one, kill all of them, then
			 re-start the program from the MIDAS programs page or directly from a terminal.
		   .
		2. Start up any other clients that aren't automatically started by the `start_daq.sh` command (anaDragon,
		   rootbeer, dragonscaler, feepics) and then try to resume data taking. If everything is looking okay, then
		   you have probably fixed things.
		   .
		3. If Steps a & b haven't solved the problem, log into smaug and issue the command `kill_daq.sh`; then 
		   go downstairs and reboot the VME crates. There are two crates, located near each of the electronics racks.
		   They are the relatively small, white-colored VME crates with horizontally-oriented modules. To reboot a crate,
		   flip off the power switch, wait ~20 seconds and then switch it back on again. Verify that the crate powers up
		   correctly and that the status lights on the front of all of the modules are green.

		   After rebooting the crates, go back to smaug and type `start_daq.sh`, then start over again at step (b).

	 If you are able to get things back to a working state, continue running but make a note of what happened and
	 any details that you think might be relevant in case this might be useful in later figuring out what went wrong
	 and potentially fixing the problem.


\section online Online Analysis

1. _How do I change a variable (ADC pedestal, slope, channel mapping, etc.)?_

  Update the corresponding value in the MIDAS ODB, and start a new run (or re-start the analysis program).
	The online analysis routines automatically sync all variables with the ODB at the beginning of each run,
	or at program start (this is true both for ROOTBEER and anaDragon/ROODY).
  .
2. _Where can I find the ODB variable corresponding to xxx?_

  All analysis-related ODB variables are contained under the `/dragon` tree. From here, they are subdivided
	by detector element, i.e. variables related to the BGO array are under `/bgo/`, etc. From there, follow the
	remaining subtrees until you find what you want. Hopefully this is intuitive enough to figure out on your own;
	if it is not, let me (G.C.) know, and I will update this section.
  .
3. _How do I add a new histogram to the analyzer?_

  If you are using ROOTBEER, use the histogram creation GUI. If you think your histogram is something that
	should normally be available for viewing, use the "Save" button on the histogram GUI to save it to a config
	file. For more information, see <a href=http://trshare.triumf.ca/~gchristian/rootbeer/doc/html/gui.html>
	http://trshare.triumf.ca/~gchristian/rootbeer/doc/html/gui.html</a>.

	If you are using rootana + ROODY, see the <a href=index.html#rootana> for users</a> section of this manual.
	.
4. _Where did the scaler histograms go?_

  By default, I haven't included any. Instead, I have adapted a ROOT-based stripchart utility to display scalers
	both graphically and as text. To use it, log into `smaug.triumf.ca` and run the program `dragonscaler`.

	If you prefer to view scalers as an analyzer histogram, it is still possible. See the proceeding FAQ for
	for information on how to create them.
	.
5. _How do I use ROOTBEER?_

  To start the program, ssh into smaug and run `rbdragon`. Click the orange `Load` button on the
	`rootbeer histograms` window to select a histogram definitions file (default is `dragon_hists.C`).
	This should load a standard set of histograms which you can tweak or add to as needed using the GUI
	or command line. If you make major changes, be sure to save them (in a different file) using the blue
	`Save` button on the `rootbeer histograms` page.

	To connect to online MIDAS data, click `Attach Online` on the `rootbeer` window. To manipulate canvases/refresh
	rate, use the `Canvas` section of the `rootbeer` window. Note that by double clicking on a canvas (or pad) _outside_
	the histogram region, you can make that canvas (pad) take focus. You can draw a histogram in the current canvas
	(pad) by cicking the blue `Draw` button on the `rootbeer histograms` window when the desired histogram is selected
	in the window above it (or double clicking the desired histogram should have the same effect). Note that histograms
	are drawn using the `Draw option:` box contents as the `opt` argument, i.e. filling the `Draw option:` box with `COL`
	draws a 2d histogram in color, etc.

	All histograms are automatically cleared (zeroed)
	at the beginning of a new run, or you can use the `Zero All` and `Zero Current` buttons to manually zero those
	histograms which are currently drawn in a canvas. If you want to zero _every_ histogram manually, type
	`rb::hist::ClearAll()` in the command window.

	This is just a bare-bones basic introduction; there is more info avaialable at
	http://trshare.triumf.ca/~gchristian/rootbeer/doc/html/index.html (though some of this may currently be out
	of date).


\section offline Offline Analysis

1. _How do I obtain the software package to do offline analysis using ROOT?_

  First, the prerequisites: you will need to install a fairly recent version of ROOT. For more information see
  http://root.cern.ch  You will also need to be sure that the $ROOTSYS environment variable is set and that $ROOTSYS/bin
	is in your search path. Once you have this, you can obtain the analysis package from the git repository as follows:
	\code
	git clone dragon@isdaq07:~/packages/dragon/analyzer
	\endcode
	The password is the standard one for dragon accounts. If you don't have git installed or prefer to just get a tarball, 
	then log into isdaq07 as user `dragon` and copy one of the tarballs from `~/packages/dragon` to your local machine.

	Once you have the package, compilation _should_ be as simple as typing `make`. If not, please let me (G.C.) know, and
	we can try to fix the problem permanently so others don't run into it. You can also fiddle with other options as explained
	in the makefile, but typically these are only useful for online analysis. Compilation creates a shared library `lib/libDragon.so`
	as well as an executable `bin/mid2root`. The executable lets you convert MIDAS files into ROOT trees, while the library can
	be loaded into a ROOT session by doing the following:
	\code
	gSystem->Load("~/packages/dragon/analyzer/lib/libDragon.so");
	\endcode
	This will give you access to all of the classes and functions in the software package from within a ROOT session or macro.
	It is convenient to create a default `rootlogon.C` file and add the above line to it so that the library is loaded automatically
	every time you start ROOT.
  .
2. _How do I commit my code changes to the git repository?_

  There are a few ways to do this, but this one is probably the easiest. First, commit your changes locally:
  \code
  git commit -a
  \endcode
  (this will bring up an editor in which you should write a commit message, then save it). Then log in to isdaq07
	as user `dragon` and go to the `~/packages/dragon/analyzer` directory. Make sure that you are on the `master` branch
	by doing `git branch`; this will list all available branches, and there should be a `*` next to `master`. If this is
	not on the master branch, do `git checkout master` to switch to it.  Make sure this branch is up-to-date
	(`git status`), and if not commmit the current changes after verifying that they won't break anything.

  Now you can pull in the changes from your remote repository:
	\code
	git pull myusername@myhost:/path/to/dragon/analyzer branch
	\endcode
  (where `branch` is the banch name on your local repository - typically this will be `master` unless you have changed things).
  This will pull in your changes and commit them (i.e. you'll be done at this point), unless there are conflicts. If there are
	conflicts, git will tell you. Open up the offending files and find the lines with `>>>>>>>>>`. These denote the location of
	conflicts. Consider the options and choose the desired resolution and save the file(s). Then do a commit to save the changes.
  .
3. _How do I convert MIDAS files into ROOT files?_

  Run the `mid2root` utility that is distributed as part of this software package (it should be located in the
	`/bin` directory). For information on running the programs, first do `mid2root --help`.

	Note that during an experiment, the lazylogger utility automatically converts every saved MIDAS file into
	ROOT format. The output files are located in `<data dir>/rootfiles/`, where `<data dir>` is the ODB
	`/Logger/Data dir` setting at the time of the run. Note that variables used in these conversions are reflect
	the state of the ODB when the run was started.
	.
4. _How can I re-analyze a MIDAS file using different variables?_

  The `mid2root` program allows users to specify an XML file containing the variables to be used for analysis
	and unpacking into ROOT trees. This is done by using the `-v` flag to specify the desired XML file. The supplied
	argument must be a valid XML file in the same format as those generated by MIDAS. Since this format is quite hard
	to generate by hand, it is suggested to first copy one of the `run***.xml` files from the logger data directory
	and then edit this to update variables as desired.
	.
5. _Now that I've converted MIDAS files into ROOT format, how can I see the data?_

  There are a few options here. One is to create a <a href=http://root.cern.ch/root/html/TChain.html>
	TChain</a> linking the events in all of your ROOT files together, and then start viewing data using
	the <a href=http://root.cern.ch/root/html/TTree.html#TTree:Draw@2>Draw()</a> command. For analyses
	with a relatively small number of events and minimal data processing requirements, this is often the
	fastest and easiest solution.

	If your analysis requirements include handling a large number of events (typically > 1 million or so will
	noticeably slow down the Draw() command), or performing non-trivial transformations on the data, there are
	some classes defined in RootAnalysis.hxx that can help you out. One is a class to filter a chain of files
	into a smaller number of events based on some cut condition and save the result in a ROOT file. Often, one
	pass through the data with a rough cut can reduce the dataset to a managable size for further analysis.
	The other classes available are a set of TSelector classes specific to DRAGON data. By deriving from these,
	you can code your analysis routines in C++. See the documentation on RootAnalysis.hxx for further information.
	.
6. _I'm really new to C++/ROOT and have no idea how to even get started looking at data. Any advice?_

  ROOT does indeed have a steep learning curve, and most of the documentation on their website assumes a certain
	level of familiarity with C++. For the true beginners, I wrote a ROOT guide a few years ago for a different group
	that can hopefully be useful. Some of it is specific to that group, but the basics are still the same. It is available
	online here: http://www.cord.edu/dept/physics/mona/manuals/root_guide.pdf

	Otherwise, there is the ROOT guide available at: http://root.cern.ch/drupal/content/users-guide
	though this often is not the best for beginners. Often,
	a good reference is the ROOT class documentation, e.g. for TTree http://root.cern.ch/root/html/TTree.html.
	.
7. _I can never remember all of the parameter names in the ROOT trees. Is there a way to find this out easily?_

  Use the TTree::StartViewer() command, e.g. `t3->StartViewer()` to see a complete graphical listing of all avaiable
	parameters in a given tree. Alternatively, you can use TTree::Print, e.g. `t3->Print()` to see a textual listing
	of available parameters.
  .
8. _How do you make plots of energy vs. channel in offline analysis from Trees. For example: DSSSD energy vs channel?_

  Take advantage of `TTree::Draw()` and its features for parsing arrays. To draw DSSSD energy vs. channel just do the
	following:
	\code
	t3->Draw("Iteration$:dsssd.ecal[]>>hst(400,0,4000,32,0,32)", "", "colz");
	\endcode

	For more information on the options available using `TTree::Draw()`, see the
	<a href=http://root.cern.ch/root/html/TTree.html#TTree:Draw@2>class method documentation</a>.

\section offline_online Generic (Online/Offline) Analysis

1. _What do all the parameter names mean? How can I find the parameter name corresponding to xyz signal?_

  Short answer: see the \link params Parameter Names \endlink page for a description of the most commonly used
	TTree parameters

  Long answer:
  Each detector element in DRAGON is represented by a C++ class in the analyzer. Each detector class contains
	data members which correspond to experimental parameters recorded by the corresponding detector. By arranging
	the various detector classes in a hierarchy, we create a tree-like structure describing experiment parameters.
	For example, the DSSSD parameters are arranged as follows:
	\code
	class Dsssd {
	public:
    /// Calibrated energy signals
		double ecal[MAX_CHANNELS]; //#
		/// Highest energy signal in the front strips (0 - 15)
		double efront;      //#
		/// Highest energy signal in the back strips (16 - 31)
		double eback;       //#
		/// Which strip was hit in the front strips
		uint32_t hit_front; //#
		/// Which strip was hit in the back strips
		uint32_t hit_back;  //#
		/// Calibrated time signal from the front strips
		double tfront;      //#
		/// Calibrated time signal from the back strips
		double tback;       //#
		
		// etc //
  };

	class Tail {
	public:
	  Dsssd dsssd;
		
		// etc //
  };
	\endcode

	This sets the DSSSD as a sub-element of Tail, with each of the DSSSD data members being sub-elements of DSSSD.
	Thus the full hierarchy for, say, the energy of channel 16 is `tail.dsssd.ecal[16]`.	When using ROOT, the class
	hierarchy is parsed into a TTree branch structure, meaning that the parameter name for
	DSSSD energy, channel 16 is exactly as noted.
  .
2. _What am I looking at when I look at the TDC (tcal) or tof parameters?_

  This can get a little confusing because of the way the TDCs operate. Briefly, in order to cover the range of times
	we need, we have to send the TDC a "stop-like" signal that comes _after_ any measurement pulse. This "stop" is generated
	by the IO32 with a programmable delay relative to the trigger. Making the delay introduces a jitter to the stop signal,
	so any measurement value coming from the TDC will also contain the same jitter.
	
	The jitter mentioned above is common to every measurement channel, so it can be removed by simply subtracting channels
	from each other in software. However, this is _not_ done in the default anaylzer for the `tcal` parameters - what you
	are looking at when you view, say, `bgo.tcal[0]` contains jitter. The `tcal` parameters have, however, been calibrated
	into nanoseconds by multiplying by a slope of 0.1 (the nominal resolution of the TDC is 100 ps / channel the way we
	operate it). If you want to view calibrated times without jitter, the easiest thing to do is to subtract off the trigger
	time (`tcal0`) yourself, i.e.
	\code
	t1->Draw("bgo.tcal[0] - tcal0")
	\endcode

	The time-of-flight parameters (e.g. `coinc.xtofh`, `hi.tof.mcp_dsssd`, etc.) _do_ have jitter subtracted since they are
	calculated by subtracting two `tcal` values from each other.
	.
3. _How is the coincidence matching done?_

  See <a href=index.html#coincmatch> this section</a> for an overview of the algorithm used for coincidence matching. The
	same algorithm is used whether in online or offline mode. Also, see the documentation on tstamp::Queue for some more
	details about the implementation of the matching algorithm.
	.
4. _Are EPICS data logged anywhere?_
  
  Yes, every time the EPICS frontend polls a channel for data, it sends the results to the `SYSTEM` buffer. From there, they
	go into both the online analysis pipeline and into the saved `run***.mid` file if data recording is turned on. The analyzer
	upacks EPICS events into a ROOT tree (`t20`) with two parameters (in addition to a MIDAS event header): channel number 
	[`ch`] and value [`val`]. So to see, for intance, the recorded values of EPICS channel 0 versus time, plot the following:
	\code
	t20->Draw("val:header.fTimeStamp", "ch == 0");
	\endcode
*/
