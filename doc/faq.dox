/**

\page faq FAQ
\tableofcontents

\section online Online Analysis

1. _How do I change a variable (ADC pedestal, slope, channel mapping, etc.)?_

  Update the corresponding value in the MIDAS ODB, and start a new run (or re-start the analysis program).
	The online analysis routines automatically sync all variables with the ODB at the beginning of each run,
	or at program start.
  .
2. _Where can I find the ODB value corresponding to xxx?_

  All analysis-related ODB variables are contained under the `/dragon` tree. From here, they are subdivided
	by detector element, i.e. variables related to the BGO array are under `/bgo/`, etc. From there, follow the
	remaining subtrees until you find what you want. Hopefully this is intuitive enough to figure out on your own;
	if it is not, let me (G.C.) know, and I will update this section.
  .
3. _How do I add a new histogram to the analyzer?_

  If you are using ROOTBEER, use the histogram creation GUI. If you think your histogram is something that
	should normally be available for viewing, use the "Save" button on the histogram GUI to save it to a config
	file. For more information, see <a href=http://trshare.triumf.ca/~gchristian/rootbeer/doc/html/gui.html>
	http://trshare.triumf.ca/~gchristian/rootbeer/doc/html/gui.html</a>.

	If you are using rootana + ROODY, see the <a href=index.html#rootana> for users</a> section of this manual.
	.
4. _Where did the scaler histograms go?_

  By default, I haven't included any. Instead, I have adapted a ROOT-based stripchart utility to display scalers
	both graphically and as text. To use it, log into `smaug.triumf.ca` and run the program `dragonscaler`.

	If you prefer to view scalers as an analyzer histogram, it is still possible. See the proceeding FAQ for
	for information on how to create them.


\section offline Offline Analysis

1. _How do I convert MIDAS files into ROOT files?_

  Run the `mid2root` utility that is distributed as part of this software package (it should be located in the
	`/bin` directory). For information on running the programs, first do `mid2root --help`.

	Note that during an experiment, the lazylogger utility automatically converts every saved MIDAS file into
	ROOT format. The output files are located in `<data dir>/rootfiles/`, where `<data dir>` is the ODB
	`/Logger/Data dir` setting at the time of the run. Note that variables used in these conversions are reflect
	the state of the ODB when the run was started.
	.
2. _How can I re-analyze a MIDAS file using different variables?_

  The `mid2root` program allows users to specify an XML file containing the variables to be used for analysis
	and unpacking into ROOT trees. This is done by using the `-v` flag to specify the desired XML file. The supplied
	argument must be a valid XML file in the same format as those generated by MIDAS. Since this format is quite hard
	to generate by hand, it is suggested to first copy one of the `run***.xml` files from the logger data directory
	and then edit this to update variables as desired.
	.
3. _Now that I've converted MIDAS files into ROOT format, how can I see the data?_

  There are a few options here. One is to create a <a href=http://root.cern.ch/root/html/TChain.html>
	TChain</a> linking the events in all of your ROOT files together, and then start viewing data using
	the <a href=http://root.cern.ch/root/html/TTree.html#TTree:Draw@2>Draw()</a> command. For analyses
	with a relatively small number of events and minimal data processing requirements, this is often the
	fastest and easiest solution.

	If your analysis requirements include handling a large number of events (typically > 1 million or so will
	noticeably slow down the Draw() command), or performing non-trivial transformations on the data, there are
	some classes defined in RootAnalysis.hxx that can help you out. One is a class to filter a chain of files
	into a smaller number of events based on some cut condition and save the result in a ROOT file. Often, one
	pass through the data with a rough cut can reduce the dataset to a managable size for further analysis.
	The other classes available are a set of TSelector classes specific to DRAGON data. By deriving from these,
	you can code your analysis routines in C++. See the documentation on RootAnalysis.hxx for further information.
	.
4. _I'm really new to C++/ROOT and have no idea how to even get started looking at data. Any advice?_

  ROOT does indeed have a steep learning curve, and most of the documentation on their website assumes a certain
	level of familiarity with C++. For the true beginners, I wrote a ROOT guide a few years ago for a different group
	that can hopefully be useful. Some of it is specific to that group, but the basics are still the same. It is available
	online here: http://www.cord.edu/dept/physics/mona/manuals/root_guide.pdf

	Otherwise, there is the ROOT guide available at: http://root.cern.ch/drupal/content/users-guide
	though this often is not the best for beginners. Often,
	a good reference is the ROOT class documentation, e.g. for TTree http://root.cern.ch/root/html/TTree.html.
	.
5. _How do you make plots of energy vs. channel in offline analysis from Trees. For example: DSSSD energy vs channel?_

  Take advantage of `TTree::Draw()` and its features for parsing arrays. To draw DSSSD energy vs. channel just do the
	following:
	\code
	t3->Draw("Iteration$:dsssd.ecal[]>>hst(400,0,4000,32,0,32)", "", "colz");
	\endcode

	For more information on the options available usint `TTree::Draw()`, see the
	<a href=http://root.cern.ch/root/html/TTree.html#TTree:Draw@2>class method documentation</a>.
*/
