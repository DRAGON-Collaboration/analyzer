/**

\page faq FAQ
\tableofcontents

\section hardware_fe Frontend and Hardware

1. _How to I add or remove a detector signal from the trigger?_

  For both the head and tail, the trigger is an `OR` of IO32 ECL inputs 0-7. Each of these inputs is masked
	by an IO32 register that is controlled through ODB variables. So, to add or remove a detector signal from
	the trigger, first identify which ECL channel the signal in question is plugged into. It should be one of
	the first eight channels on the LeCroy NIM->ECL converter labeled with "trigger + scalers" or "IO32".
  Once you have identified the channel in question, edit the corresponding ODB variable
	`/Equipment/xxxxVME/Settings/IO32/ChannelEnable[n]`, where `xxxx` is either `Head` or `Tail`, and `n` is the
	channel number in question (note that the NIM->ECL converters are labeled starting with 1, whereas the ODB
	variables start at 0). Setting the `ChannelEnable[n]` variable to `y` adds the signal to the trigger, while
	`n` removes it.
	.
2. _What are all those signals going into and out of the IO32?_

  See the following page:	http://trshare.triumf.ca/~gchristian/dragon/frontend/html/hardware.html for an overview
	of the signals originating from and going into the IO32.
	.
3. _What about the scalers?_

  Scaler inputs are discussed at http://trshare.triumf.ca/~gchristian/dragon/frontend/html/hardware.html#scalers
	.
4. _What about other signals? Is there a drawing of what goes where?_

  Currently, there isn't a full drawing of all connections, but it is on the to-do list. In the meantime,
	you can refer to the <a href=http://trshare.triumf.ca/~gchristian/dragon/frontend/html/hardware.html>
	hardware</a> and <a href=http://trshare.triumf.ca/~gchristian/dragon/frontend/html/trigger.html>
	trigger logic</a> pages to get an idea of what the signals are for and what the various inputs/outputs
	to the VME modules are. Nearly everything else in the setup, electronics wise, (i.e. all of the NIM
	modules) is pretty sparse and hopefully can be figured out from cable tracing.
	.
5. _How to I operate the new frontend?_

  See the operation guide at http://trshare.triumf.ca/~gchristian/dragon/frontend/html/operation.html
	.
6. _What parts of the frontend are configurable? How do I control it?_

  Most of the fronend options (gate widths, delays, etc.) are controlled by ODB variables.
	See the operation guide http://trshare.triumf.ca/~gchristian/dragon/frontend/html/operation.html
	for more information.
	
\section online Online Analysis

1. _How do I change a variable (ADC pedestal, slope, channel mapping, etc.)?_

  Update the corresponding value in the MIDAS ODB, and start a new run (or re-start the analysis program).
	The online analysis routines automatically sync all variables with the ODB at the beginning of each run,
	or at program start (this is true both for ROOTBEER and anaDragon/ROODY).
  .
2. _Where can I find the ODB variable corresponding to xxx?_

  All analysis-related ODB variables are contained under the `/dragon` tree. From here, they are subdivided
	by detector element, i.e. variables related to the BGO array are under `/bgo/`, etc. From there, follow the
	remaining subtrees until you find what you want. Hopefully this is intuitive enough to figure out on your own;
	if it is not, let me (G.C.) know, and I will update this section.
  .
3. _How do I add a new histogram to the analyzer?_

  If you are using ROOTBEER, use the histogram creation GUI. If you think your histogram is something that
	should normally be available for viewing, use the "Save" button on the histogram GUI to save it to a config
	file. For more information, see <a href=http://trshare.triumf.ca/~gchristian/rootbeer/doc/html/gui.html>
	http://trshare.triumf.ca/~gchristian/rootbeer/doc/html/gui.html</a>.

	If you are using rootana + ROODY, see the <a href=index.html#rootana> for users</a> section of this manual.
	.
4. _Where did the scaler histograms go?_

  By default, I haven't included any. Instead, I have adapted a ROOT-based stripchart utility to display scalers
	both graphically and as text. To use it, log into `smaug.triumf.ca` and run the program `dragonscaler`.

	If you prefer to view scalers as an analyzer histogram, it is still possible. See the proceeding FAQ for
	for information on how to create them.
	.
5. _How do I use ROOTBEER?_

  To start the program, ssh into smaug and run `rbdragon`. Click the orange `Load` button on the
	`rootbeer histograms` window to select a histogram definitions file (default is `dragon_hists.C`).
	This should load a standard set of histograms which you can tweak or add to as needed using the GUI
	or command line. If you make major changes, be sure to save them (in a different file) using the blue
	`Save` button on the `rootbeer histograms` page.

	To connect to online MIDAS data, click `Attach Online` on the `rootbeer` window. To manipulate canvases/refresh
	rate, use the `Canvas` section of the `rootbeer` window. Note that by double clicking on a canvas (or pad) _outside_
	the histogram region, you can make that canvas (pad) take focus. You can draw a histogram in the current canvas
	(pad) by cicking the blue `Draw` button on the `rootbeer histograms` window when the desired histogram is selected
	in the window above it (or double clicking the desired histogram should have the same effect). Note that histograms
	are drawn using the `Draw option:` box contents as the `opt` argument, i.e. filling the `Draw option:` box with `COL`
	draws a 2d histogram in color, etc.

	All histograms are automatically cleared (zeroed)
	at the beginning of a new run, or you can use the `Zero All` and `Zero Current` buttons to manually zero those
	histograms which are currently drawn in a canvas. If you want to zero _every_ histogram manually, type
	`rb::hist::ClearAll()` in the command window.

	This is just a bare-bones basic introduction; there is more info avaialable at
	http://trshare.triumf.ca/~gchristian/rootbeer/doc/html/index.html (though some of this may currently be out
	of date).


\section offline Offline Analysis

1. _How do I convert MIDAS files into ROOT files?_

  Run the `mid2root` utility that is distributed as part of this software package (it should be located in the
	`/bin` directory). For information on running the programs, first do `mid2root --help`.

	Note that during an experiment, the lazylogger utility automatically converts every saved MIDAS file into
	ROOT format. The output files are located in `<data dir>/rootfiles/`, where `<data dir>` is the ODB
	`/Logger/Data dir` setting at the time of the run. Note that variables used in these conversions are reflect
	the state of the ODB when the run was started.
	.
2. _How can I re-analyze a MIDAS file using different variables?_

  The `mid2root` program allows users to specify an XML file containing the variables to be used for analysis
	and unpacking into ROOT trees. This is done by using the `-v` flag to specify the desired XML file. The supplied
	argument must be a valid XML file in the same format as those generated by MIDAS. Since this format is quite hard
	to generate by hand, it is suggested to first copy one of the `run***.xml` files from the logger data directory
	and then edit this to update variables as desired.
	.
3. _Now that I've converted MIDAS files into ROOT format, how can I see the data?_

  There are a few options here. One is to create a <a href=http://root.cern.ch/root/html/TChain.html>
	TChain</a> linking the events in all of your ROOT files together, and then start viewing data using
	the <a href=http://root.cern.ch/root/html/TTree.html#TTree:Draw@2>Draw()</a> command. For analyses
	with a relatively small number of events and minimal data processing requirements, this is often the
	fastest and easiest solution.

	If your analysis requirements include handling a large number of events (typically > 1 million or so will
	noticeably slow down the Draw() command), or performing non-trivial transformations on the data, there are
	some classes defined in RootAnalysis.hxx that can help you out. One is a class to filter a chain of files
	into a smaller number of events based on some cut condition and save the result in a ROOT file. Often, one
	pass through the data with a rough cut can reduce the dataset to a managable size for further analysis.
	The other classes available are a set of TSelector classes specific to DRAGON data. By deriving from these,
	you can code your analysis routines in C++. See the documentation on RootAnalysis.hxx for further information.
	.
4. _I'm really new to C++/ROOT and have no idea how to even get started looking at data. Any advice?_

  ROOT does indeed have a steep learning curve, and most of the documentation on their website assumes a certain
	level of familiarity with C++. For the true beginners, I wrote a ROOT guide a few years ago for a different group
	that can hopefully be useful. Some of it is specific to that group, but the basics are still the same. It is available
	online here: http://www.cord.edu/dept/physics/mona/manuals/root_guide.pdf

	Otherwise, there is the ROOT guide available at: http://root.cern.ch/drupal/content/users-guide
	though this often is not the best for beginners. Often,
	a good reference is the ROOT class documentation, e.g. for TTree http://root.cern.ch/root/html/TTree.html.
	.
5. _I can never remember all of the parameter names in the ROOT trees. Is there a way to find this out easily?_

  Use the TTree::StartViewer() command, e.g. `t3->StartViewer()` to see a complete graphical listing of all avaiable
	parameters in a given tree. Alternatively, you can use TTree::Print, e.e. `t3->Print()` to see a textual listing
	of available parameters.
  .
6. _How do you make plots of energy vs. channel in offline analysis from Trees. For example: DSSSD energy vs channel?_

  Take advantage of `TTree::Draw()` and its features for parsing arrays. To draw DSSSD energy vs. channel just do the
	following:
	\code
	t3->Draw("Iteration$:dsssd.ecal[]>>hst(400,0,4000,32,0,32)", "", "colz");
	\endcode

	For more information on the options available using `TTree::Draw()`, see the
	<a href=http://root.cern.ch/root/html/TTree.html#TTree:Draw@2>class method documentation</a>.

\section offline_online Generic (Online/Offline) Analysis

1. _What do all the parameter names mean? How can I find the parameter name corresponding to xyz signal?_

  All of the parameters are arranged in a tree-like structure defined by classes....

	See namespace dragon for more....
  .
2. _What am I looking at when I look at the TDC (tcal) or tof parameters?_

  This can get a little confusing because of the way the TDCs operate. Briefly, in order to cover the range of times
	we need, we have to send the TDC a "stop-like" signal that comes _after_ any measurement pulse. This "stop" is generated
	by the IO32 with a programmable delay relative to the trigger. Making the delay introduces a jitter to the stop signal,
	so any measurement value coming from the TDC will also contain the same jitter.
	
	The jitter mentioned above is common to every measurement channel, so it can be removed by simply subtracting channels
	from each other in software. However, this is _not_ done in the default anaylzer for the `tcal` parameters - what you
	are looking at when you view, say, `bgo.tcal[0]` contains jitter. The `tcal` parameters have, however, been calibrated
	into nanoseconds by multiplying by a slope of 0.1 (the nominal resolution of the TDC is 100 ps / channel the way we
	operate it). If you want to view calibrated times without jitter, the easiest thing to do is to subtract off the trigger
	time (`tcal0`) yourself, i.e.
	\code
	t1->Draw("bgo.tcal[0] - tcal0")
	\endcode

	The time-of-flight parameters (e.g. `coinc.xtofh`, `hi.tof.mcp_dsssd`, etc.) _do_ have jitter subtracted since they are
	calculated by subtracting two `tcal` values from each other.

*/
