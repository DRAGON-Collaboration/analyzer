// This file has been generated by Py++.

#include "boost/python.hpp"

#include "__array_1.pypp.hpp"

#include "/Users/gchristian/soft/develop/dragon/analyzer/src/dragon/Auxillary.hxx"

#include "/Users/gchristian/soft/develop/dragon/analyzer/src/dragon/Bgo.hxx"

#include "/Users/gchristian/soft/develop/dragon/analyzer/src/dragon/Coinc.hxx"

#include "/Users/gchristian/soft/develop/dragon/analyzer/src/dragon/DSSSD.hxx"

#include "/Users/gchristian/soft/develop/dragon/analyzer/src/dragon/Head.hxx"

#include "/Users/gchristian/soft/develop/dragon/analyzer/src/dragon/IonChamber.hxx"

#include "/Users/gchristian/soft/develop/dragon/analyzer/src/dragon/MCP.hxx"

#include "/Users/gchristian/soft/develop/dragon/analyzer/src/dragon/SurfaceBarrier.hxx"

#include "/Users/gchristian/soft/develop/dragon/analyzer/src/dragon/Tail.hxx"

#include "/Users/gchristian/soft/develop/dragon/analyzer/src/utils/VariableStructs.hxx"

namespace bp = boost::python;

struct Bgo_wrapper : dragon::Bgo, bp::wrapper< dragon::Bgo > {

    Bgo_wrapper(dragon::Bgo const & arg )
    : dragon::Bgo( arg )
      , bp::wrapper< dragon::Bgo >(){
        // copy constructor
        
    }

    Bgo_wrapper( )
    : dragon::Bgo( )
      , bp::wrapper< dragon::Bgo >(){
        // null constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 30>
    pyplusplus_ecal_wrapper( ::dragon::Bgo & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 30>( inst.ecal );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 30>
    pyplusplus_esort_wrapper( ::dragon::Bgo & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 30>( inst.esort );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 30>
    pyplusplus_tcal_wrapper( ::dragon::Bgo & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 30>( inst.tcal );
    }

};

struct DSSSD_wrapper : dragon::DSSSD, bp::wrapper< dragon::DSSSD > {

    DSSSD_wrapper(dragon::DSSSD const & arg )
    : dragon::DSSSD( arg )
      , bp::wrapper< dragon::DSSSD >(){
        // copy constructor
        
    }

    DSSSD_wrapper( )
    : dragon::DSSSD( )
      , bp::wrapper< dragon::DSSSD >(){
        // null constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 32>
    pyplusplus_ecal_wrapper( ::dragon::DSSSD & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 32>( inst.ecal );
    }

};

struct IonChamber_wrapper : dragon::IonChamber, bp::wrapper< dragon::IonChamber > {

    IonChamber_wrapper(dragon::IonChamber const & arg )
    : dragon::IonChamber( arg )
      , bp::wrapper< dragon::IonChamber >(){
        // copy constructor
        
    }

    IonChamber_wrapper( )
    : dragon::IonChamber( )
      , bp::wrapper< dragon::IonChamber >(){
        // null constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 4>
    pyplusplus_anode_wrapper( ::dragon::IonChamber & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 4>( inst.anode );
    }

};

struct MCP_wrapper : dragon::MCP, bp::wrapper< dragon::MCP > {

    MCP_wrapper(dragon::MCP const & arg )
    : dragon::MCP( arg )
      , bp::wrapper< dragon::MCP >(){
        // copy constructor
        
    }

    MCP_wrapper( )
    : dragon::MCP( )
      , bp::wrapper< dragon::MCP >(){
        // null constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 4>
    pyplusplus_anode_wrapper( ::dragon::MCP & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 4>( inst.anode );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 2>
    pyplusplus_tcal_wrapper( ::dragon::MCP & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 2>( inst.tcal );
    }

};

struct NaI_wrapper : dragon::NaI, bp::wrapper< dragon::NaI > {

    NaI_wrapper(dragon::NaI const & arg )
    : dragon::NaI( arg )
      , bp::wrapper< dragon::NaI >(){
        // copy constructor
        
    }

    NaI_wrapper( )
    : dragon::NaI( )
      , bp::wrapper< dragon::NaI >(){
        // null constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 2>
    pyplusplus_ecal_wrapper( ::dragon::NaI & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 2>( inst.ecal );
    }

};

struct SurfaceBarrier_wrapper : dragon::SurfaceBarrier, bp::wrapper< dragon::SurfaceBarrier > {

    SurfaceBarrier_wrapper(dragon::SurfaceBarrier const & arg )
    : dragon::SurfaceBarrier( arg )
      , bp::wrapper< dragon::SurfaceBarrier >(){
        // copy constructor
        
    }

    SurfaceBarrier_wrapper( )
    : dragon::SurfaceBarrier( )
      , bp::wrapper< dragon::SurfaceBarrier >(){
        // null constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 2>
    pyplusplus_ecal_wrapper( ::dragon::SurfaceBarrier & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 2>( inst.ecal );
    }

};

struct Tail_wrapper : dragon::Tail, bp::wrapper< dragon::Tail > {

    Tail_wrapper(dragon::Tail const & arg )
    : dragon::Tail( arg )
      , bp::wrapper< dragon::Tail >(){
        // copy constructor
        
    }

    Tail_wrapper( )
    : dragon::Tail( )
      , bp::wrapper< dragon::Tail >(){
        // null constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< ::vme::V792, 2>
    pyplusplus_v785_wrapper( ::dragon::Tail & inst ){
        return pyplusplus::containers::static_sized::array_1_t< ::vme::V792, 2>( inst.v785 );
    }

};

struct AdcVariables_less__2__greater__wrapper : utils::AdcVariables< 2 >, bp::wrapper< utils::AdcVariables< 2 > > {

    AdcVariables_less__2__greater__wrapper(utils::AdcVariables<2> const & arg )
    : utils::AdcVariables<2>( arg )
      , bp::wrapper< utils::AdcVariables< 2 > >(){
        // copy constructor
        
    }

    AdcVariables_less__2__greater__wrapper()
    : utils::AdcVariables<2>()
      , bp::wrapper< utils::AdcVariables< 2 > >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 2>
    pyplusplus_channel_wrapper( ::utils::AdcVariables<2> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 2>( inst.channel );
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 2>
    pyplusplus_module_wrapper( ::utils::AdcVariables<2> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 2>( inst.module );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 2>
    pyplusplus_offset_wrapper( ::utils::AdcVariables<2> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 2>( inst.offset );
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 2>
    pyplusplus_pedestal_wrapper( ::utils::AdcVariables<2> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 2>( inst.pedestal );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 2>
    pyplusplus_slope_wrapper( ::utils::AdcVariables<2> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 2>( inst.slope );
    }

};

struct AdcVariables_less__30__greater__wrapper : utils::AdcVariables< 30 >, bp::wrapper< utils::AdcVariables< 30 > > {

    AdcVariables_less__30__greater__wrapper(utils::AdcVariables<30> const & arg )
    : utils::AdcVariables<30>( arg )
      , bp::wrapper< utils::AdcVariables< 30 > >(){
        // copy constructor
        
    }

    AdcVariables_less__30__greater__wrapper()
    : utils::AdcVariables<30>()
      , bp::wrapper< utils::AdcVariables< 30 > >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 30>
    pyplusplus_channel_wrapper( ::utils::AdcVariables<30> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 30>( inst.channel );
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 30>
    pyplusplus_module_wrapper( ::utils::AdcVariables<30> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 30>( inst.module );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 30>
    pyplusplus_offset_wrapper( ::utils::AdcVariables<30> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 30>( inst.offset );
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 30>
    pyplusplus_pedestal_wrapper( ::utils::AdcVariables<30> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 30>( inst.pedestal );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 30>
    pyplusplus_slope_wrapper( ::utils::AdcVariables<30> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 30>( inst.slope );
    }

};

struct AdcVariables_less__32__greater__wrapper : utils::AdcVariables< 32 >, bp::wrapper< utils::AdcVariables< 32 > > {

    AdcVariables_less__32__greater__wrapper(utils::AdcVariables<32> const & arg )
    : utils::AdcVariables<32>( arg )
      , bp::wrapper< utils::AdcVariables< 32 > >(){
        // copy constructor
        
    }

    AdcVariables_less__32__greater__wrapper()
    : utils::AdcVariables<32>()
      , bp::wrapper< utils::AdcVariables< 32 > >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 32>
    pyplusplus_channel_wrapper( ::utils::AdcVariables<32> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 32>( inst.channel );
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 32>
    pyplusplus_module_wrapper( ::utils::AdcVariables<32> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 32>( inst.module );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 32>
    pyplusplus_offset_wrapper( ::utils::AdcVariables<32> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 32>( inst.offset );
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 32>
    pyplusplus_pedestal_wrapper( ::utils::AdcVariables<32> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 32>( inst.pedestal );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 32>
    pyplusplus_slope_wrapper( ::utils::AdcVariables<32> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 32>( inst.slope );
    }

};

struct AdcVariables_less__4__greater__wrapper : utils::AdcVariables< 4 >, bp::wrapper< utils::AdcVariables< 4 > > {

    AdcVariables_less__4__greater__wrapper(utils::AdcVariables<4> const & arg )
    : utils::AdcVariables<4>( arg )
      , bp::wrapper< utils::AdcVariables< 4 > >(){
        // copy constructor
        
    }

    AdcVariables_less__4__greater__wrapper()
    : utils::AdcVariables<4>()
      , bp::wrapper< utils::AdcVariables< 4 > >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 4>
    pyplusplus_channel_wrapper( ::utils::AdcVariables<4> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 4>( inst.channel );
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 4>
    pyplusplus_module_wrapper( ::utils::AdcVariables<4> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 4>( inst.module );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 4>
    pyplusplus_offset_wrapper( ::utils::AdcVariables<4> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 4>( inst.offset );
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 4>
    pyplusplus_pedestal_wrapper( ::utils::AdcVariables<4> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 4>( inst.pedestal );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 4>
    pyplusplus_slope_wrapper( ::utils::AdcVariables<4> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 4>( inst.slope );
    }

};

struct PositionVariables_less__30__greater__wrapper : utils::PositionVariables< 30 >, bp::wrapper< utils::PositionVariables< 30 > > {

    PositionVariables_less__30__greater__wrapper(utils::PositionVariables<30> const & arg )
    : utils::PositionVariables<30>( arg )
      , bp::wrapper< utils::PositionVariables< 30 > >(){
        // copy constructor
        
    }

    PositionVariables_less__30__greater__wrapper()
    : utils::PositionVariables<30>()
      , bp::wrapper< utils::PositionVariables< 30 > >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 30>
    pyplusplus_x_wrapper( ::utils::PositionVariables<30> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 30>( inst.x );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 30>
    pyplusplus_y_wrapper( ::utils::PositionVariables<30> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 30>( inst.y );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 30>
    pyplusplus_z_wrapper( ::utils::PositionVariables<30> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 30>( inst.z );
    }

};

struct TdcVariables_less__2__greater__wrapper : utils::TdcVariables< 2 >, bp::wrapper< utils::TdcVariables< 2 > > {

    TdcVariables_less__2__greater__wrapper(utils::TdcVariables<2> const & arg )
    : utils::TdcVariables<2>( arg )
      , bp::wrapper< utils::TdcVariables< 2 > >(){
        // copy constructor
        
    }

    TdcVariables_less__2__greater__wrapper()
    : utils::TdcVariables<2>()
      , bp::wrapper< utils::TdcVariables< 2 > >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 2>
    pyplusplus_channel_wrapper( ::utils::TdcVariables<2> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 2>( inst.channel );
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 2>
    pyplusplus_module_wrapper( ::utils::TdcVariables<2> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 2>( inst.module );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 2>
    pyplusplus_offset_wrapper( ::utils::TdcVariables<2> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 2>( inst.offset );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 2>
    pyplusplus_slope_wrapper( ::utils::TdcVariables<2> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 2>( inst.slope );
    }

};

struct TdcVariables_less__30__greater__wrapper : utils::TdcVariables< 30 >, bp::wrapper< utils::TdcVariables< 30 > > {

    TdcVariables_less__30__greater__wrapper(utils::TdcVariables<30> const & arg )
    : utils::TdcVariables<30>( arg )
      , bp::wrapper< utils::TdcVariables< 30 > >(){
        // copy constructor
        
    }

    TdcVariables_less__30__greater__wrapper()
    : utils::TdcVariables<30>()
      , bp::wrapper< utils::TdcVariables< 30 > >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 30>
    pyplusplus_channel_wrapper( ::utils::TdcVariables<30> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 30>( inst.channel );
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 30>
    pyplusplus_module_wrapper( ::utils::TdcVariables<30> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 30>( inst.module );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 30>
    pyplusplus_offset_wrapper( ::utils::TdcVariables<30> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 30>( inst.offset );
    }

    static pyplusplus::containers::static_sized::array_1_t< double, 30>
    pyplusplus_slope_wrapper( ::utils::TdcVariables<30> & inst ){
        return pyplusplus::containers::static_sized::array_1_t< double, 30>( inst.slope );
    }

};

#include "Headers.hpp"

#include "Constants.hpp"

BOOST_PYTHON_MODULE(dragon){
    { //::dragon::Bgo
        typedef bp::class_< Bgo_wrapper > Bgo_exposer_t;
        Bgo_exposer_t Bgo_exposer = Bgo_exposer_t( "Bgo", bp::init< >() );
        bp::scope Bgo_scope( Bgo_exposer );
        bp::class_< dragon::Bgo::Variables >( "Variables", bp::init< >() )    
            .def( 
                "reset"
                , (void ( ::dragon::Bgo::Variables::* )(  ) )( &::dragon::Bgo::Variables::reset ) )    
            .def( 
                "set"
                , (void ( ::dragon::Bgo::Variables::* )( char const * ) )( &::dragon::Bgo::Variables::set )
                , ( bp::arg("odb_file") ) )    
            .def_readwrite( "adc", &dragon::Bgo::Variables::adc )    
            .def_readwrite( "pos", &dragon::Bgo::Variables::pos )    
            .def_readwrite( "tdc", &dragon::Bgo::Variables::tdc );
        { //::dragon::Bgo::calculate
        
            typedef void ( ::dragon::Bgo::*calculate_function_type )(  ) ;
            
            Bgo_exposer.def( 
                "calculate"
                , calculate_function_type( &::dragon::Bgo::calculate ) );
        
        }
        { //::dragon::Bgo::read_data
        
            typedef void ( ::dragon::Bgo::*read_data_function_type )( ::vme::V792 const &,::vme::V1190 const & ) ;
            
            Bgo_exposer.def( 
                "read_data"
                , read_data_function_type( &::dragon::Bgo::read_data )
                , ( bp::arg("adc"), bp::arg("tdc") ) );
        
        }
        { //::dragon::Bgo::reset
        
            typedef void ( ::dragon::Bgo::*reset_function_type )(  ) ;
            
            Bgo_exposer.def( 
                "reset"
                , reset_function_type( &::dragon::Bgo::reset ) );
        
        }
        Bgo_exposer.def_readonly( "MAX_CHANNELS", dragon::Bgo::MAX_CHANNELS );
        pyplusplus::containers::static_sized::register_array_1< double, 30 >( "__array_1_double_30" );
        { //dragon::Bgo::ecal [variable], type=double[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 30> ( *array_wrapper_creator )( ::dragon::Bgo & );
            
            Bgo_exposer.add_property( "ecal"
                , bp::make_function( array_wrapper_creator(&Bgo_wrapper::pyplusplus_ecal_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //dragon::Bgo::esort [variable], type=double[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 30> ( *array_wrapper_creator )( ::dragon::Bgo & );
            
            Bgo_exposer.add_property( "esort"
                , bp::make_function( array_wrapper_creator(&Bgo_wrapper::pyplusplus_esort_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        Bgo_exposer.def_readwrite( "hit0", &dragon::Bgo::hit0 );
        Bgo_exposer.def_readwrite( "sum", &dragon::Bgo::sum );
        Bgo_exposer.def_readwrite( "t0", &dragon::Bgo::t0 );
        { //dragon::Bgo::tcal [variable], type=double[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 30> ( *array_wrapper_creator )( ::dragon::Bgo & );
            
            Bgo_exposer.add_property( "tcal"
                , bp::make_function( array_wrapper_creator(&Bgo_wrapper::pyplusplus_tcal_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        Bgo_exposer.def_readwrite( "variables", &dragon::Bgo::variables );
        Bgo_exposer.def_readwrite( "x0", &dragon::Bgo::x0 );
        Bgo_exposer.def_readwrite( "y0", &dragon::Bgo::y0 );
        Bgo_exposer.def_readwrite( "z0", &dragon::Bgo::z0 );
    }

    bp::class_< dragon::Coinc >( "Coinc", bp::init< >() )    
        .def( bp::init< dragon::Head const &, dragon::Tail const & >(( bp::arg("head"), bp::arg("tail") )) )    
        .def( 
            "calculate"
            , (void ( ::dragon::Coinc::* )(  ) )( &::dragon::Coinc::calculate ) )    
        .def( 
            "compose_event"
            , (void ( ::dragon::Coinc::* )( ::dragon::Head const &,::dragon::Tail const & ) )( &::dragon::Coinc::compose_event )
            , ( bp::arg("head_"), bp::arg("tail_") ) )    
        .def( 
            "reset"
            , (void ( ::dragon::Coinc::* )(  ) )( &::dragon::Coinc::reset ) )    
        .def( 
            "set_variables"
            , (void ( ::dragon::Coinc::* )( char const * ) )( &::dragon::Coinc::set_variables )
            , ( bp::arg("odb_file") ) )    
        .def( 
            "unpack"
            , (void ( ::dragon::Coinc::* )( ::midas::CoincEvent const & ) )( &::dragon::Coinc::unpack )
            , ( bp::arg("coincEvent") ) )    
        .def_readwrite( "head", &dragon::Coinc::head )    
        .def_readwrite( "tail", &dragon::Coinc::tail );

    { //::dragon::DSSSD
        typedef bp::class_< DSSSD_wrapper > DSSSD_exposer_t;
        DSSSD_exposer_t DSSSD_exposer = DSSSD_exposer_t( "DSSSD", bp::init< >() );
        bp::scope DSSSD_scope( DSSSD_exposer );
        bp::class_< dragon::DSSSD::Variables >( "Variables", bp::init< >() )    
            .def( 
                "reset"
                , (void ( ::dragon::DSSSD::Variables::* )(  ) )( &::dragon::DSSSD::Variables::reset ) )    
            .def( 
                "set"
                , (void ( ::dragon::DSSSD::Variables::* )( char const * ) )( &::dragon::DSSSD::Variables::set )
                , ( bp::arg("odb_file") ) )    
            .def_readwrite( "adc", &dragon::DSSSD::Variables::adc )    
            .def_readwrite( "tdc", &dragon::DSSSD::Variables::tdc );
        { //::dragon::DSSSD::calculate
        
            typedef void ( ::dragon::DSSSD::*calculate_function_type )(  ) ;
            
            DSSSD_exposer.def( 
                "calculate"
                , calculate_function_type( &::dragon::DSSSD::calculate ) );
        
        }
        { //::dragon::DSSSD::read_data
        
            typedef void ( ::dragon::DSSSD::*read_data_function_type )( ::vme::V785 const *,::vme::V1190 const & ) ;
            
            DSSSD_exposer.def( 
                "read_data"
                , read_data_function_type( &::dragon::DSSSD::read_data )
                , ( bp::arg("adcs"), bp::arg("tdc") ) );
        
        }
        { //::dragon::DSSSD::reset
        
            typedef void ( ::dragon::DSSSD::*reset_function_type )(  ) ;
            
            DSSSD_exposer.def( 
                "reset"
                , reset_function_type( &::dragon::DSSSD::reset ) );
        
        }
        DSSSD_exposer.def_readonly( "MAX_CHANNELS", dragon::DSSSD::MAX_CHANNELS );
        DSSSD_exposer.def_readwrite( "eback", &dragon::DSSSD::eback );
        pyplusplus::containers::static_sized::register_array_1< double, 32 >( "__array_1_double_32" );
        { //dragon::DSSSD::ecal [variable], type=double[32]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 32> ( *array_wrapper_creator )( ::dragon::DSSSD & );
            
            DSSSD_exposer.add_property( "ecal"
                , bp::make_function( array_wrapper_creator(&DSSSD_wrapper::pyplusplus_ecal_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        DSSSD_exposer.def_readwrite( "efront", &dragon::DSSSD::efront );
        DSSSD_exposer.def_readwrite( "hit_back", &dragon::DSSSD::hit_back );
        DSSSD_exposer.def_readwrite( "hit_front", &dragon::DSSSD::hit_front );
        DSSSD_exposer.def_readwrite( "tcal", &dragon::DSSSD::tcal );
        DSSSD_exposer.def_readwrite( "variables", &dragon::DSSSD::variables );
    }

    { //::dragon::Ge
        typedef bp::class_< dragon::Ge > Ge_exposer_t;
        Ge_exposer_t Ge_exposer = Ge_exposer_t( "Ge", bp::init< >() );
        bp::scope Ge_scope( Ge_exposer );
        bp::class_< dragon::Ge::Variables >( "Variables", bp::init< >() )    
            .def( 
                "reset"
                , (void ( ::dragon::Ge::Variables::* )(  ) )( &::dragon::Ge::Variables::reset ) )    
            .def( 
                "set"
                , (void ( ::dragon::Ge::Variables::* )( char const * ) )( &::dragon::Ge::Variables::set )
                , ( bp::arg("odb_file") ) )    
            .def_readwrite( "adc", &dragon::Ge::Variables::adc );
        { //::dragon::Ge::calculate
        
            typedef void ( ::dragon::Ge::*calculate_function_type )(  ) ;
            
            Ge_exposer.def( 
                "calculate"
                , calculate_function_type( &::dragon::Ge::calculate ) );
        
        }
        { //::dragon::Ge::read_data
        
            typedef void ( ::dragon::Ge::*read_data_function_type )( ::vme::V785 const *,::vme::V1190 const & ) ;
            
            Ge_exposer.def( 
                "read_data"
                , read_data_function_type( &::dragon::Ge::read_data )
                , ( bp::arg("adcs"), bp::arg("arg1") ) );
        
        }
        { //::dragon::Ge::reset
        
            typedef void ( ::dragon::Ge::*reset_function_type )(  ) ;
            
            Ge_exposer.def( 
                "reset"
                , reset_function_type( &::dragon::Ge::reset ) );
        
        }
        Ge_exposer.def_readwrite( "ecal", &dragon::Ge::ecal );
        Ge_exposer.def_readwrite( "variables", &dragon::Ge::variables );
    }

    { //::dragon::Head
        typedef bp::class_< dragon::Head > Head_exposer_t;
        Head_exposer_t Head_exposer = Head_exposer_t( "Head", bp::init< >() );
        bp::scope Head_scope( Head_exposer );
        { //::dragon::Head::Tof
            typedef bp::class_< dragon::Head::Tof > Tof_exposer_t;
            Tof_exposer_t Tof_exposer = Tof_exposer_t( "Tof", bp::init< dragon::Head const * >(( bp::arg("parent") )) );
            bp::scope Tof_scope( Tof_exposer );
            bp::class_< dragon::Head::Tof::Variables >( "Variables", bp::init< >() )    
                .def( 
                    "reset"
                    , (void ( ::dragon::Head::Tof::Variables::* )(  ) )( &::dragon::Head::Tof::Variables::reset ) )    
                .def( 
                    "set"
                    , (void ( ::dragon::Head::Tof::Variables::* )( char const * ) )( &::dragon::Head::Tof::Variables::set )
                    , ( bp::arg("odb") ) )    
                .def_readwrite( "xtdc", &dragon::Head::Tof::Variables::xtdc );
            bp::implicitly_convertible< dragon::Head const *, dragon::Head::Tof >();
            { //::dragon::Head::Tof::calculate
            
                typedef void ( ::dragon::Head::Tof::*calculate_function_type )(  ) ;
                
                Tof_exposer.def( 
                    "calculate"
                    , calculate_function_type( &::dragon::Head::Tof::calculate ) );
            
            }
            { //::dragon::Head::Tof::read_data
            
                typedef void ( ::dragon::Head::Tof::*read_data_function_type )( ::vme::V785 const &,::vme::V1190 const & ) ;
                
                Tof_exposer.def( 
                    "read_data"
                    , read_data_function_type( &::dragon::Head::Tof::read_data )
                    , ( bp::arg("arg0"), bp::arg("v1190") ) );
            
            }
            { //::dragon::Head::Tof::reset
            
                typedef void ( ::dragon::Head::Tof::*reset_function_type )(  ) ;
                
                Tof_exposer.def( 
                    "reset"
                    , reset_function_type( &::dragon::Head::Tof::reset ) );
            
            }
            Tof_exposer.def_readwrite( "gamma_tail", &dragon::Head::Tof::gamma_tail );
            Tof_exposer.def_readwrite( "tcalx", &dragon::Head::Tof::tcalx );
            Tof_exposer.def_readwrite( "variables", &dragon::Head::Tof::variables );
        }
        { //::dragon::Head::calculate
        
            typedef void ( ::dragon::Head::*calculate_function_type )(  ) ;
            
            Head_exposer.def( 
                "calculate"
                , calculate_function_type( &::dragon::Head::calculate ) );
        
        }
        { //::dragon::Head::reset
        
            typedef void ( ::dragon::Head::*reset_function_type )(  ) ;
            
            Head_exposer.def( 
                "reset"
                , reset_function_type( &::dragon::Head::reset ) );
        
        }
        { //::dragon::Head::set_variables
        
            typedef void ( ::dragon::Head::*set_variables_function_type )( char const * ) ;
            
            Head_exposer.def( 
                "set_variables"
                , set_variables_function_type( &::dragon::Head::set_variables )
                , ( bp::arg("odb_file") ) );
        
        }
        { //::dragon::Head::unpack
        
            typedef void ( ::dragon::Head::*unpack_function_type )( ::midas::Event const & ) ;
            
            Head_exposer.def( 
                "unpack"
                , unpack_function_type( &::dragon::Head::unpack )
                , ( bp::arg("event") ) );
        
        }
        Head_exposer.def_readwrite( "bgo", &dragon::Head::bgo );
        Head_exposer.def_readwrite( "header", &dragon::Head::header );
        Head_exposer.def_readwrite( "io32", &dragon::Head::io32 );
        Head_exposer.def_readwrite( "tof", &dragon::Head::tof );
        Head_exposer.def_readwrite( "v1190", &dragon::Head::v1190 );
        Head_exposer.def_readwrite( "v792", &dragon::Head::v792 );
    }

    { //::dragon::IonChamber
        typedef bp::class_< IonChamber_wrapper > IonChamber_exposer_t;
        IonChamber_exposer_t IonChamber_exposer = IonChamber_exposer_t( "IonChamber", bp::init< >() );
        bp::scope IonChamber_scope( IonChamber_exposer );
        bp::class_< dragon::IonChamber::Variables >( "Variables", bp::init< >() )    
            .def( 
                "reset"
                , (void ( ::dragon::IonChamber::Variables::* )(  ) )( &::dragon::IonChamber::Variables::reset ) )    
            .def( 
                "set"
                , (void ( ::dragon::IonChamber::Variables::* )( char const * ) )( &::dragon::IonChamber::Variables::set )
                , ( bp::arg("odb_file") ) )    
            .def_readwrite( "adc", &dragon::IonChamber::Variables::adc )    
            .def_readwrite( "tdc", &dragon::IonChamber::Variables::tdc );
        { //::dragon::IonChamber::calculate
        
            typedef void ( ::dragon::IonChamber::*calculate_function_type )(  ) ;
            
            IonChamber_exposer.def( 
                "calculate"
                , calculate_function_type( &::dragon::IonChamber::calculate ) );
        
        }
        { //::dragon::IonChamber::read_data
        
            typedef void ( ::dragon::IonChamber::*read_data_function_type )( ::vme::V785 const *,::vme::V1190 const & ) ;
            
            IonChamber_exposer.def( 
                "read_data"
                , read_data_function_type( &::dragon::IonChamber::read_data )
                , ( bp::arg("adcs"), bp::arg("tdc") ) );
        
        }
        { //::dragon::IonChamber::reset
        
            typedef void ( ::dragon::IonChamber::*reset_function_type )(  ) ;
            
            IonChamber_exposer.def( 
                "reset"
                , reset_function_type( &::dragon::IonChamber::reset ) );
        
        }
        IonChamber_exposer.def_readonly( "MAX_CHANNELS", dragon::IonChamber::MAX_CHANNELS );
        pyplusplus::containers::static_sized::register_array_1< double, 4 >( "__array_1_double_4" );
        { //dragon::IonChamber::anode [variable], type=double[4]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 4> ( *array_wrapper_creator )( ::dragon::IonChamber & );
            
            IonChamber_exposer.add_property( "anode"
                , bp::make_function( array_wrapper_creator(&IonChamber_wrapper::pyplusplus_anode_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        IonChamber_exposer.def_readwrite( "sum", &dragon::IonChamber::sum );
        IonChamber_exposer.def_readwrite( "tcal", &dragon::IonChamber::tcal );
        IonChamber_exposer.def_readwrite( "variables", &dragon::IonChamber::variables );
    }

    { //::dragon::MCP
        typedef bp::class_< MCP_wrapper > MCP_exposer_t;
        MCP_exposer_t MCP_exposer = MCP_exposer_t( "MCP", bp::init< >() );
        bp::scope MCP_scope( MCP_exposer );
        bp::class_< dragon::MCP::Variables >( "Variables", bp::init< >() )    
            .def( 
                "reset"
                , (void ( ::dragon::MCP::Variables::* )(  ) )( &::dragon::MCP::Variables::reset ) )    
            .def( 
                "set"
                , (void ( ::dragon::MCP::Variables::* )( char const * ) )( &::dragon::MCP::Variables::set )
                , ( bp::arg("odb_file") ) )    
            .def_readwrite( "adc", &dragon::MCP::Variables::adc )    
            .def_readwrite( "tac_adc", &dragon::MCP::Variables::tac_adc )    
            .def_readwrite( "tdc", &dragon::MCP::Variables::tdc );
        { //::dragon::MCP::calculate
        
            typedef void ( ::dragon::MCP::*calculate_function_type )(  ) ;
            
            MCP_exposer.def( 
                "calculate"
                , calculate_function_type( &::dragon::MCP::calculate ) );
        
        }
        { //::dragon::MCP::read_data
        
            typedef void ( ::dragon::MCP::*read_data_function_type )( ::vme::V785 const *,::vme::V1190 const & ) ;
            
            MCP_exposer.def( 
                "read_data"
                , read_data_function_type( &::dragon::MCP::read_data )
                , ( bp::arg("adcs"), bp::arg("tdc") ) );
        
        }
        { //::dragon::MCP::reset
        
            typedef void ( ::dragon::MCP::*reset_function_type )(  ) ;
            
            MCP_exposer.def( 
                "reset"
                , reset_function_type( &::dragon::MCP::reset ) );
        
        }
        MCP_exposer.def_readonly( "MAX_CHANNELS", dragon::MCP::MAX_CHANNELS );
        MCP_exposer.def_readonly( "NUM_DETECTORS", dragon::MCP::NUM_DETECTORS );
        { //dragon::MCP::anode [variable], type=double[4]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 4> ( *array_wrapper_creator )( ::dragon::MCP & );
            
            MCP_exposer.add_property( "anode"
                , bp::make_function( array_wrapper_creator(&MCP_wrapper::pyplusplus_anode_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        MCP_exposer.def_readwrite( "tac", &dragon::MCP::tac );
        pyplusplus::containers::static_sized::register_array_1< double, 2 >( "__array_1_double_2" );
        { //dragon::MCP::tcal [variable], type=double[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 2> ( *array_wrapper_creator )( ::dragon::MCP & );
            
            MCP_exposer.add_property( "tcal"
                , bp::make_function( array_wrapper_creator(&MCP_wrapper::pyplusplus_tcal_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        MCP_exposer.def_readwrite( "variables", &dragon::MCP::variables );
        MCP_exposer.def_readwrite( "x", &dragon::MCP::x );
        MCP_exposer.def_readwrite( "y", &dragon::MCP::y );
    }

    { //::dragon::NaI
        typedef bp::class_< NaI_wrapper > NaI_exposer_t;
        NaI_exposer_t NaI_exposer = NaI_exposer_t( "NaI", bp::init< >() );
        bp::scope NaI_scope( NaI_exposer );
        bp::class_< dragon::NaI::Variables >( "Variables", bp::init< >() )    
            .def( 
                "reset"
                , (void ( ::dragon::NaI::Variables::* )(  ) )( &::dragon::NaI::Variables::reset ) )    
            .def( 
                "set"
                , (void ( ::dragon::NaI::Variables::* )( char const * ) )( &::dragon::NaI::Variables::set )
                , ( bp::arg("odb_file") ) )    
            .def_readwrite( "adc", &dragon::NaI::Variables::adc );
        { //::dragon::NaI::calculate
        
            typedef void ( ::dragon::NaI::*calculate_function_type )(  ) ;
            
            NaI_exposer.def( 
                "calculate"
                , calculate_function_type( &::dragon::NaI::calculate ) );
        
        }
        { //::dragon::NaI::read_data
        
            typedef void ( ::dragon::NaI::*read_data_function_type )( ::vme::V785 const *,::vme::V1190 const & ) ;
            
            NaI_exposer.def( 
                "read_data"
                , read_data_function_type( &::dragon::NaI::read_data )
                , ( bp::arg("adcs"), bp::arg("arg1") ) );
        
        }
        { //::dragon::NaI::reset
        
            typedef void ( ::dragon::NaI::*reset_function_type )(  ) ;
            
            NaI_exposer.def( 
                "reset"
                , reset_function_type( &::dragon::NaI::reset ) );
        
        }
        NaI_exposer.def_readonly( "MAX_CHANNELS", dragon::NaI::MAX_CHANNELS );
        { //dragon::NaI::ecal [variable], type=double[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 2> ( *array_wrapper_creator )( ::dragon::NaI & );
            
            NaI_exposer.add_property( "ecal"
                , bp::make_function( array_wrapper_creator(&NaI_wrapper::pyplusplus_ecal_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        NaI_exposer.def_readwrite( "variables", &dragon::NaI::variables );
    }

    { //::dragon::SurfaceBarrier
        typedef bp::class_< SurfaceBarrier_wrapper > SurfaceBarrier_exposer_t;
        SurfaceBarrier_exposer_t SurfaceBarrier_exposer = SurfaceBarrier_exposer_t( "SurfaceBarrier", bp::init< >() );
        bp::scope SurfaceBarrier_scope( SurfaceBarrier_exposer );
        bp::class_< dragon::SurfaceBarrier::Variables >( "Variables", bp::init< >() )    
            .def( 
                "reset"
                , (void ( ::dragon::SurfaceBarrier::Variables::* )(  ) )( &::dragon::SurfaceBarrier::Variables::reset ) )    
            .def( 
                "set"
                , (void ( ::dragon::SurfaceBarrier::Variables::* )( char const * ) )( &::dragon::SurfaceBarrier::Variables::set )
                , ( bp::arg("odb_file") ) )    
            .def_readwrite( "adc", &dragon::SurfaceBarrier::Variables::adc );
        { //::dragon::SurfaceBarrier::calculate
        
            typedef void ( ::dragon::SurfaceBarrier::*calculate_function_type )(  ) ;
            
            SurfaceBarrier_exposer.def( 
                "calculate"
                , calculate_function_type( &::dragon::SurfaceBarrier::calculate ) );
        
        }
        { //::dragon::SurfaceBarrier::read_data
        
            typedef void ( ::dragon::SurfaceBarrier::*read_data_function_type )( ::vme::V785 const *,::vme::V1190 const & ) ;
            
            SurfaceBarrier_exposer.def( 
                "read_data"
                , read_data_function_type( &::dragon::SurfaceBarrier::read_data )
                , ( bp::arg("adcs"), bp::arg("arg1") ) );
        
        }
        { //::dragon::SurfaceBarrier::reset
        
            typedef void ( ::dragon::SurfaceBarrier::*reset_function_type )(  ) ;
            
            SurfaceBarrier_exposer.def( 
                "reset"
                , reset_function_type( &::dragon::SurfaceBarrier::reset ) );
        
        }
        SurfaceBarrier_exposer.def_readonly( "MAX_CHANNELS", dragon::SurfaceBarrier::MAX_CHANNELS );
        { //dragon::SurfaceBarrier::ecal [variable], type=double[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 2> ( *array_wrapper_creator )( ::dragon::SurfaceBarrier & );
            
            SurfaceBarrier_exposer.add_property( "ecal"
                , bp::make_function( array_wrapper_creator(&SurfaceBarrier_wrapper::pyplusplus_ecal_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        SurfaceBarrier_exposer.def_readwrite( "variables", &dragon::SurfaceBarrier::variables );
    }

    { //::dragon::Tail
        typedef bp::class_< Tail_wrapper > Tail_exposer_t;
        Tail_exposer_t Tail_exposer = Tail_exposer_t( "Tail", bp::init< >() );
        bp::scope Tail_scope( Tail_exposer );
        { //::dragon::Tail::Tof
            typedef bp::class_< dragon::Tail::Tof > Tof_exposer_t;
            Tof_exposer_t Tof_exposer = Tof_exposer_t( "Tof", bp::init< dragon::Tail const * >(( bp::arg("parent") )) );
            bp::scope Tof_scope( Tof_exposer );
            bp::class_< dragon::Tail::Tof::Variables >( "Variables", bp::init< >() )    
                .def( 
                    "reset"
                    , (void ( ::dragon::Tail::Tof::Variables::* )(  ) )( &::dragon::Tail::Tof::Variables::reset ) )    
                .def( 
                    "set"
                    , (void ( ::dragon::Tail::Tof::Variables::* )( char const * ) )( &::dragon::Tail::Tof::Variables::set )
                    , ( bp::arg("odb") ) )    
                .def_readwrite( "xtdc", &dragon::Tail::Tof::Variables::xtdc );
            bp::implicitly_convertible< dragon::Tail const *, dragon::Tail::Tof >();
            { //::dragon::Tail::Tof::calculate
            
                typedef void ( ::dragon::Tail::Tof::*calculate_function_type )(  ) ;
                
                Tof_exposer.def( 
                    "calculate"
                    , calculate_function_type( &::dragon::Tail::Tof::calculate ) );
            
            }
            { //::dragon::Tail::Tof::read_data
            
                typedef void ( ::dragon::Tail::Tof::*read_data_function_type )( ::vme::V785 const *,::vme::V1190 const & ) ;
                
                Tof_exposer.def( 
                    "read_data"
                    , read_data_function_type( &::dragon::Tail::Tof::read_data )
                    , ( bp::arg("arg0"), bp::arg("v1190") ) );
            
            }
            { //::dragon::Tail::Tof::reset
            
                typedef void ( ::dragon::Tail::Tof::*reset_function_type )(  ) ;
                
                Tof_exposer.def( 
                    "reset"
                    , reset_function_type( &::dragon::Tail::Tof::reset ) );
            
            }
            Tof_exposer.def_readwrite( "gamma_dsssd", &dragon::Tail::Tof::gamma_dsssd );
            Tof_exposer.def_readwrite( "gamma_ic", &dragon::Tail::Tof::gamma_ic );
            Tof_exposer.def_readwrite( "gamma_mcp", &dragon::Tail::Tof::gamma_mcp );
            Tof_exposer.def_readwrite( "mcp", &dragon::Tail::Tof::mcp );
            Tof_exposer.def_readwrite( "mcp_dsssd", &dragon::Tail::Tof::mcp_dsssd );
            Tof_exposer.def_readwrite( "mcp_ic", &dragon::Tail::Tof::mcp_ic );
            Tof_exposer.def_readwrite( "tcalx", &dragon::Tail::Tof::tcalx );
            Tof_exposer.def_readwrite( "variables", &dragon::Tail::Tof::variables );
        }
        { //::dragon::Tail::calculate
        
            typedef void ( ::dragon::Tail::*calculate_function_type )(  ) ;
            
            Tail_exposer.def( 
                "calculate"
                , calculate_function_type( &::dragon::Tail::calculate ) );
        
        }
        { //::dragon::Tail::reset
        
            typedef void ( ::dragon::Tail::*reset_function_type )(  ) ;
            
            Tail_exposer.def( 
                "reset"
                , reset_function_type( &::dragon::Tail::reset ) );
        
        }
        { //::dragon::Tail::set_variables
        
            typedef void ( ::dragon::Tail::*set_variables_function_type )( char const * ) ;
            
            Tail_exposer.def( 
                "set_variables"
                , set_variables_function_type( &::dragon::Tail::set_variables )
                , ( bp::arg("odb_file") ) );
        
        }
        { //::dragon::Tail::unpack
        
            typedef void ( ::dragon::Tail::*unpack_function_type )( ::midas::Event const & ) ;
            
            Tail_exposer.def( 
                "unpack"
                , unpack_function_type( &::dragon::Tail::unpack )
                , ( bp::arg("event") ) );
        
        }
        Tail_exposer.def_readonly( "NUM_ADC", dragon::Tail::NUM_ADC );
        Tail_exposer.def_readwrite( "dsssd", &dragon::Tail::dsssd );
        Tail_exposer.def_readwrite( "ge", &dragon::Tail::ge );
        Tail_exposer.def_readwrite( "header", &dragon::Tail::header );
        Tail_exposer.def_readwrite( "ic", &dragon::Tail::ic );
        Tail_exposer.def_readwrite( "io32", &dragon::Tail::io32 );
        Tail_exposer.def_readwrite( "mcp", &dragon::Tail::mcp );
        Tail_exposer.def_readwrite( "nai", &dragon::Tail::nai );
        Tail_exposer.def_readwrite( "sb", &dragon::Tail::sb );
        Tail_exposer.def_readwrite( "tof", &dragon::Tail::tof );
        Tail_exposer.def_readwrite( "v1190", &dragon::Tail::v1190 );
        pyplusplus::containers::static_sized::register_array_1< ::vme::V792, 2, bp::return_internal_reference< > >( "__array_1__scope_vme_scope_V792_2" );
        { //dragon::Tail::v785 [variable], type=vme::V785[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< ::vme::V792, 2> ( *array_wrapper_creator )( ::dragon::Tail & );
            
            Tail_exposer.add_property( "v785"
                , bp::make_function( array_wrapper_creator(&Tail_wrapper::pyplusplus_v785_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    bp::class_< utils::AdcVariables2< 1 > >( "AdcVariables2_less__1__greater_" )    
        .def_readwrite( "channel", &utils::AdcVariables2< 1 >::channel )    
        .def_readwrite( "module", &utils::AdcVariables2< 1 >::module )    
        .def_readwrite( "offset", &utils::AdcVariables2< 1 >::offset )    
        .def_readwrite( "pedestal", &utils::AdcVariables2< 1 >::pedestal )    
        .def_readwrite( "slope", &utils::AdcVariables2< 1 >::slope )    
        .def_readwrite( "slope2", &utils::AdcVariables2< 1 >::slope2 );

    bp::class_< utils::AdcVariables< 1 > >( "AdcVariables_less__1__greater_" )    
        .def_readwrite( "channel", &utils::AdcVariables< 1 >::channel )    
        .def_readwrite( "module", &utils::AdcVariables< 1 >::module )    
        .def_readwrite( "offset", &utils::AdcVariables< 1 >::offset )    
        .def_readwrite( "pedestal", &utils::AdcVariables< 1 >::pedestal )    
        .def_readwrite( "slope", &utils::AdcVariables< 1 >::slope );

    { //::utils::AdcVariables< 2 >
        typedef bp::class_< AdcVariables_less__2__greater__wrapper > AdcVariables_less__2__greater__exposer_t;
        AdcVariables_less__2__greater__exposer_t AdcVariables_less__2__greater__exposer = AdcVariables_less__2__greater__exposer_t( "AdcVariables_less__2__greater_" );
        bp::scope AdcVariables_less__2__greater__scope( AdcVariables_less__2__greater__exposer );
        pyplusplus::containers::static_sized::register_array_1< int, 2 >( "__array_1_int_2" );
        { //utils::AdcVariables<2>::channel [variable], type=int[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 2> ( *array_wrapper_creator )( ::utils::AdcVariables<2> & );
            
            AdcVariables_less__2__greater__exposer.add_property( "channel"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__2__greater__wrapper::pyplusplus_channel_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<2>::module [variable], type=int[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 2> ( *array_wrapper_creator )( ::utils::AdcVariables<2> & );
            
            AdcVariables_less__2__greater__exposer.add_property( "module"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__2__greater__wrapper::pyplusplus_module_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<2>::offset [variable], type=double[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 2> ( *array_wrapper_creator )( ::utils::AdcVariables<2> & );
            
            AdcVariables_less__2__greater__exposer.add_property( "offset"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__2__greater__wrapper::pyplusplus_offset_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<2>::pedestal [variable], type=int[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 2> ( *array_wrapper_creator )( ::utils::AdcVariables<2> & );
            
            AdcVariables_less__2__greater__exposer.add_property( "pedestal"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__2__greater__wrapper::pyplusplus_pedestal_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<2>::slope [variable], type=double[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 2> ( *array_wrapper_creator )( ::utils::AdcVariables<2> & );
            
            AdcVariables_less__2__greater__exposer.add_property( "slope"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__2__greater__wrapper::pyplusplus_slope_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    { //::utils::AdcVariables< 30 >
        typedef bp::class_< AdcVariables_less__30__greater__wrapper > AdcVariables_less__30__greater__exposer_t;
        AdcVariables_less__30__greater__exposer_t AdcVariables_less__30__greater__exposer = AdcVariables_less__30__greater__exposer_t( "AdcVariables_less__30__greater_" );
        bp::scope AdcVariables_less__30__greater__scope( AdcVariables_less__30__greater__exposer );
        pyplusplus::containers::static_sized::register_array_1< int, 30 >( "__array_1_int_30" );
        { //utils::AdcVariables<30>::channel [variable], type=int[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 30> ( *array_wrapper_creator )( ::utils::AdcVariables<30> & );
            
            AdcVariables_less__30__greater__exposer.add_property( "channel"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__30__greater__wrapper::pyplusplus_channel_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<30>::module [variable], type=int[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 30> ( *array_wrapper_creator )( ::utils::AdcVariables<30> & );
            
            AdcVariables_less__30__greater__exposer.add_property( "module"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__30__greater__wrapper::pyplusplus_module_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<30>::offset [variable], type=double[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 30> ( *array_wrapper_creator )( ::utils::AdcVariables<30> & );
            
            AdcVariables_less__30__greater__exposer.add_property( "offset"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__30__greater__wrapper::pyplusplus_offset_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<30>::pedestal [variable], type=int[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 30> ( *array_wrapper_creator )( ::utils::AdcVariables<30> & );
            
            AdcVariables_less__30__greater__exposer.add_property( "pedestal"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__30__greater__wrapper::pyplusplus_pedestal_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<30>::slope [variable], type=double[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 30> ( *array_wrapper_creator )( ::utils::AdcVariables<30> & );
            
            AdcVariables_less__30__greater__exposer.add_property( "slope"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__30__greater__wrapper::pyplusplus_slope_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    { //::utils::AdcVariables< 32 >
        typedef bp::class_< AdcVariables_less__32__greater__wrapper > AdcVariables_less__32__greater__exposer_t;
        AdcVariables_less__32__greater__exposer_t AdcVariables_less__32__greater__exposer = AdcVariables_less__32__greater__exposer_t( "AdcVariables_less__32__greater_" );
        bp::scope AdcVariables_less__32__greater__scope( AdcVariables_less__32__greater__exposer );
        pyplusplus::containers::static_sized::register_array_1< int, 32 >( "__array_1_int_32" );
        { //utils::AdcVariables<32>::channel [variable], type=int[32]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 32> ( *array_wrapper_creator )( ::utils::AdcVariables<32> & );
            
            AdcVariables_less__32__greater__exposer.add_property( "channel"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__32__greater__wrapper::pyplusplus_channel_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<32>::module [variable], type=int[32]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 32> ( *array_wrapper_creator )( ::utils::AdcVariables<32> & );
            
            AdcVariables_less__32__greater__exposer.add_property( "module"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__32__greater__wrapper::pyplusplus_module_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<32>::offset [variable], type=double[32]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 32> ( *array_wrapper_creator )( ::utils::AdcVariables<32> & );
            
            AdcVariables_less__32__greater__exposer.add_property( "offset"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__32__greater__wrapper::pyplusplus_offset_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<32>::pedestal [variable], type=int[32]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 32> ( *array_wrapper_creator )( ::utils::AdcVariables<32> & );
            
            AdcVariables_less__32__greater__exposer.add_property( "pedestal"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__32__greater__wrapper::pyplusplus_pedestal_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<32>::slope [variable], type=double[32]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 32> ( *array_wrapper_creator )( ::utils::AdcVariables<32> & );
            
            AdcVariables_less__32__greater__exposer.add_property( "slope"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__32__greater__wrapper::pyplusplus_slope_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    { //::utils::AdcVariables< 4 >
        typedef bp::class_< AdcVariables_less__4__greater__wrapper > AdcVariables_less__4__greater__exposer_t;
        AdcVariables_less__4__greater__exposer_t AdcVariables_less__4__greater__exposer = AdcVariables_less__4__greater__exposer_t( "AdcVariables_less__4__greater_" );
        bp::scope AdcVariables_less__4__greater__scope( AdcVariables_less__4__greater__exposer );
        pyplusplus::containers::static_sized::register_array_1< int, 4 >( "__array_1_int_4" );
        { //utils::AdcVariables<4>::channel [variable], type=int[4]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 4> ( *array_wrapper_creator )( ::utils::AdcVariables<4> & );
            
            AdcVariables_less__4__greater__exposer.add_property( "channel"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__4__greater__wrapper::pyplusplus_channel_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<4>::module [variable], type=int[4]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 4> ( *array_wrapper_creator )( ::utils::AdcVariables<4> & );
            
            AdcVariables_less__4__greater__exposer.add_property( "module"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__4__greater__wrapper::pyplusplus_module_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<4>::offset [variable], type=double[4]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 4> ( *array_wrapper_creator )( ::utils::AdcVariables<4> & );
            
            AdcVariables_less__4__greater__exposer.add_property( "offset"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__4__greater__wrapper::pyplusplus_offset_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<4>::pedestal [variable], type=int[4]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 4> ( *array_wrapper_creator )( ::utils::AdcVariables<4> & );
            
            AdcVariables_less__4__greater__exposer.add_property( "pedestal"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__4__greater__wrapper::pyplusplus_pedestal_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::AdcVariables<4>::slope [variable], type=double[4]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 4> ( *array_wrapper_creator )( ::utils::AdcVariables<4> & );
            
            AdcVariables_less__4__greater__exposer.add_property( "slope"
                , bp::make_function( array_wrapper_creator(&AdcVariables_less__4__greater__wrapper::pyplusplus_slope_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    bp::class_< utils::PositionVariables< 1 > >( "PositionVariables_less__1__greater_" )    
        .def_readwrite( "x", &utils::PositionVariables< 1 >::x )    
        .def_readwrite( "y", &utils::PositionVariables< 1 >::y )    
        .def_readwrite( "z", &utils::PositionVariables< 1 >::z );

    { //::utils::PositionVariables< 30 >
        typedef bp::class_< PositionVariables_less__30__greater__wrapper > PositionVariables_less__30__greater__exposer_t;
        PositionVariables_less__30__greater__exposer_t PositionVariables_less__30__greater__exposer = PositionVariables_less__30__greater__exposer_t( "PositionVariables_less__30__greater_" );
        bp::scope PositionVariables_less__30__greater__scope( PositionVariables_less__30__greater__exposer );
        { //utils::PositionVariables<30>::x [variable], type=double[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 30> ( *array_wrapper_creator )( ::utils::PositionVariables<30> & );
            
            PositionVariables_less__30__greater__exposer.add_property( "x"
                , bp::make_function( array_wrapper_creator(&PositionVariables_less__30__greater__wrapper::pyplusplus_x_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::PositionVariables<30>::y [variable], type=double[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 30> ( *array_wrapper_creator )( ::utils::PositionVariables<30> & );
            
            PositionVariables_less__30__greater__exposer.add_property( "y"
                , bp::make_function( array_wrapper_creator(&PositionVariables_less__30__greater__wrapper::pyplusplus_y_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::PositionVariables<30>::z [variable], type=double[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 30> ( *array_wrapper_creator )( ::utils::PositionVariables<30> & );
            
            PositionVariables_less__30__greater__exposer.add_property( "z"
                , bp::make_function( array_wrapper_creator(&PositionVariables_less__30__greater__wrapper::pyplusplus_z_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    bp::class_< utils::TdcVariables2< 1 > >( "TdcVariables2_less__1__greater_" )    
        .def_readwrite( "channel", &utils::TdcVariables2< 1 >::channel )    
        .def_readwrite( "module", &utils::TdcVariables2< 1 >::module )    
        .def_readwrite( "offset", &utils::TdcVariables2< 1 >::offset )    
        .def_readwrite( "slope", &utils::TdcVariables2< 1 >::slope )    
        .def_readwrite( "slope2", &utils::TdcVariables2< 1 >::slope2 );

    bp::class_< utils::TdcVariables< 1 > >( "TdcVariables_less__1__greater_" )    
        .def_readwrite( "channel", &utils::TdcVariables< 1 >::channel )    
        .def_readwrite( "module", &utils::TdcVariables< 1 >::module )    
        .def_readwrite( "offset", &utils::TdcVariables< 1 >::offset )    
        .def_readwrite( "slope", &utils::TdcVariables< 1 >::slope );

    { //::utils::TdcVariables< 2 >
        typedef bp::class_< TdcVariables_less__2__greater__wrapper > TdcVariables_less__2__greater__exposer_t;
        TdcVariables_less__2__greater__exposer_t TdcVariables_less__2__greater__exposer = TdcVariables_less__2__greater__exposer_t( "TdcVariables_less__2__greater_" );
        bp::scope TdcVariables_less__2__greater__scope( TdcVariables_less__2__greater__exposer );
        { //utils::TdcVariables<2>::channel [variable], type=int[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 2> ( *array_wrapper_creator )( ::utils::TdcVariables<2> & );
            
            TdcVariables_less__2__greater__exposer.add_property( "channel"
                , bp::make_function( array_wrapper_creator(&TdcVariables_less__2__greater__wrapper::pyplusplus_channel_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::TdcVariables<2>::module [variable], type=int[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 2> ( *array_wrapper_creator )( ::utils::TdcVariables<2> & );
            
            TdcVariables_less__2__greater__exposer.add_property( "module"
                , bp::make_function( array_wrapper_creator(&TdcVariables_less__2__greater__wrapper::pyplusplus_module_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::TdcVariables<2>::offset [variable], type=double[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 2> ( *array_wrapper_creator )( ::utils::TdcVariables<2> & );
            
            TdcVariables_less__2__greater__exposer.add_property( "offset"
                , bp::make_function( array_wrapper_creator(&TdcVariables_less__2__greater__wrapper::pyplusplus_offset_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::TdcVariables<2>::slope [variable], type=double[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 2> ( *array_wrapper_creator )( ::utils::TdcVariables<2> & );
            
            TdcVariables_less__2__greater__exposer.add_property( "slope"
                , bp::make_function( array_wrapper_creator(&TdcVariables_less__2__greater__wrapper::pyplusplus_slope_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    { //::utils::TdcVariables< 30 >
        typedef bp::class_< TdcVariables_less__30__greater__wrapper > TdcVariables_less__30__greater__exposer_t;
        TdcVariables_less__30__greater__exposer_t TdcVariables_less__30__greater__exposer = TdcVariables_less__30__greater__exposer_t( "TdcVariables_less__30__greater_" );
        bp::scope TdcVariables_less__30__greater__scope( TdcVariables_less__30__greater__exposer );
        { //utils::TdcVariables<30>::channel [variable], type=int[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 30> ( *array_wrapper_creator )( ::utils::TdcVariables<30> & );
            
            TdcVariables_less__30__greater__exposer.add_property( "channel"
                , bp::make_function( array_wrapper_creator(&TdcVariables_less__30__greater__wrapper::pyplusplus_channel_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::TdcVariables<30>::module [variable], type=int[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 30> ( *array_wrapper_creator )( ::utils::TdcVariables<30> & );
            
            TdcVariables_less__30__greater__exposer.add_property( "module"
                , bp::make_function( array_wrapper_creator(&TdcVariables_less__30__greater__wrapper::pyplusplus_module_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::TdcVariables<30>::offset [variable], type=double[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 30> ( *array_wrapper_creator )( ::utils::TdcVariables<30> & );
            
            TdcVariables_less__30__greater__exposer.add_property( "offset"
                , bp::make_function( array_wrapper_creator(&TdcVariables_less__30__greater__wrapper::pyplusplus_offset_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //utils::TdcVariables<30>::slope [variable], type=double[30]
        
            typedef pyplusplus::containers::static_sized::array_1_t< double, 30> ( *array_wrapper_creator )( ::utils::TdcVariables<30> & );
            
            TdcVariables_less__30__greater__exposer.add_property( "slope"
                , bp::make_function( array_wrapper_creator(&TdcVariables_less__30__greater__wrapper::pyplusplus_slope_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    bp::class_< utils::err::Strm, boost::noncopyable >( "Strm", bp::init< char const *, char const *, std::ostream & >(( bp::arg("what"), bp::arg("where"), bp::arg("stream") )) );

    { //::utils::err::Error
        typedef bp::class_< utils::err::Error, bp::bases< utils::err::Strm >, boost::noncopyable > Error_exposer_t;
        Error_exposer_t Error_exposer = Error_exposer_t( "Error", bp::init< char const * >(( bp::arg("where") )) );
        bp::scope Error_scope( Error_exposer );
        bp::implicitly_convertible< char const *, utils::err::Error >();
    }

    { //::utils::err::Info
        typedef bp::class_< utils::err::Info, bp::bases< utils::err::Strm >, boost::noncopyable > Info_exposer_t;
        Info_exposer_t Info_exposer = Info_exposer_t( "Info", bp::init< char const * >(( bp::arg("where") )) );
        bp::scope Info_scope( Info_exposer );
        bp::implicitly_convertible< char const *, utils::err::Info >();
    }

    { //::utils::err::Warning
        typedef bp::class_< utils::err::Warning, bp::bases< utils::err::Strm >, boost::noncopyable > Warning_exposer_t;
        Warning_exposer_t Warning_exposer = Warning_exposer_t( "Warning", bp::init< char const * >(( bp::arg("where") )) );
        bp::scope Warning_scope( Warning_exposer );
        bp::implicitly_convertible< char const *, utils::err::Warning >();
    }

    bp::scope().attr("NO_DATA") = dragon::NO_DATA;
}
