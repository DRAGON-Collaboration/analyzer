// This file has been generated by Py++.

#include "boost/python.hpp"

#include "__array_1.pypp.hpp"

#include "/Users/gchristian/soft/develop/dragon/analyzer/src/midas/Event.hxx"

namespace bp = boost::python;

struct Bank32_t_wrapper : Bank32_t, bp::wrapper< Bank32_t > {

    Bank32_t_wrapper(Bank32_t const & arg )
    : Bank32_t( arg )
      , bp::wrapper< Bank32_t >(){
        // copy constructor
        
    }

    Bank32_t_wrapper()
    : Bank32_t()
      , bp::wrapper< Bank32_t >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 4>
    pyplusplus_fName_wrapper( ::Bank32_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 4>( inst.fName );
    }

};

struct Bank_t_wrapper : Bank_t, bp::wrapper< Bank_t > {

    Bank_t_wrapper(Bank_t const & arg )
    : Bank_t( arg )
      , bp::wrapper< Bank_t >(){
        // copy constructor
        
    }

    Bank_t_wrapper()
    : Bank_t()
      , bp::wrapper< Bank_t >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 4>
    pyplusplus_fName_wrapper( ::Bank_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 4>( inst.fName );
    }

};

struct CoincEvent_wrapper : midas::CoincEvent, bp::wrapper< midas::CoincEvent > {

    CoincEvent_wrapper(::midas::Event const & event1, ::midas::Event const & event2 )
    : midas::CoincEvent( boost::ref(event1), boost::ref(event2) )
      , bp::wrapper< midas::CoincEvent >(){
        // constructor
    
    }

    static ::midas::Event const * get_fGamma(midas::CoincEvent const & inst ){
        return inst.fGamma;
    }
    
    static void set_fGamma( midas::CoincEvent & inst, ::midas::Event const * new_value ){ 
        inst.fGamma = new_value;
    }

    static ::midas::Event const * get_fHeavyIon(midas::CoincEvent const & inst ){
        return inst.fHeavyIon;
    }
    
    static void set_fHeavyIon( midas::CoincEvent & inst, ::midas::Event const * new_value ){ 
        inst.fHeavyIon = new_value;
    }

};

#include "Headers.hpp"

#include "Constants.hpp"

BOOST_PYTHON_MODULE(midas){
    { //::Bank32_t
        typedef bp::class_< Bank32_t_wrapper > Bank32_t_exposer_t;
        Bank32_t_exposer_t Bank32_t_exposer = Bank32_t_exposer_t( "Bank32_t" );
        bp::scope Bank32_t_scope( Bank32_t_exposer );
        Bank32_t_exposer.def_readwrite( "fDataSize", &Bank32_t::fDataSize );
        pyplusplus::containers::static_sized::register_array_1< char, 4 >( "__array_1_char_4" );
        { //Bank32_t::fName [variable], type=char[4]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 4> ( *array_wrapper_creator )( ::Bank32_t & );
            
            Bank32_t_exposer.add_property( "fName"
                , bp::make_function( array_wrapper_creator(&Bank32_t_wrapper::pyplusplus_fName_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        Bank32_t_exposer.def_readwrite( "fType", &Bank32_t::fType );
    }

    bp::class_< BankHeader_t >( "BankHeader_t" )    
        .def_readwrite( "fDataSize", &BankHeader_t::fDataSize )    
        .def_readwrite( "fFlags", &BankHeader_t::fFlags );

    { //::Bank_t
        typedef bp::class_< Bank_t_wrapper > Bank_t_exposer_t;
        Bank_t_exposer_t Bank_t_exposer = Bank_t_exposer_t( "Bank_t" );
        bp::scope Bank_t_scope( Bank_t_exposer );
        Bank_t_exposer.def_readwrite( "fDataSize", &Bank_t::fDataSize );
        { //Bank_t::fName [variable], type=char[4]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 4> ( *array_wrapper_creator )( ::Bank_t & );
            
            Bank_t_exposer.add_property( "fName"
                , bp::make_function( array_wrapper_creator(&Bank_t_wrapper::pyplusplus_fName_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        Bank_t_exposer.def_readwrite( "fType", &Bank_t::fType );
    }

    bp::class_< EventHeader_t >( "EventHeader_t" )    
        .def_readwrite( "fDataSize", &EventHeader_t::fDataSize )    
        .def_readwrite( "fEventId", &EventHeader_t::fEventId )    
        .def_readwrite( "fSerialNumber", &EventHeader_t::fSerialNumber )    
        .def_readwrite( "fTimeStamp", &EventHeader_t::fTimeStamp )    
        .def_readwrite( "fTriggerMask", &EventHeader_t::fTriggerMask );

    { //::TMidasEvent
        typedef bp::class_< TMidasEvent > TMidasEvent_exposer_t;
        TMidasEvent_exposer_t TMidasEvent_exposer = TMidasEvent_exposer_t( "TMidasEvent", bp::init< >() );
        bp::scope TMidasEvent_scope( TMidasEvent_exposer );
        TMidasEvent_exposer.def( bp::init< TMidasEvent const & >(( bp::arg("arg0") )) );
        { //::TMidasEvent::AllocateData
        
            typedef void ( ::TMidasEvent::*AllocateData_function_type )(  ) ;
            
            TMidasEvent_exposer.def( 
                "AllocateData"
                , AllocateData_function_type( &::TMidasEvent::AllocateData ) );
        
        }
        { //::TMidasEvent::Clear
        
            typedef void ( ::TMidasEvent::*Clear_function_type )(  ) ;
            
            TMidasEvent_exposer.def( 
                "Clear"
                , Clear_function_type( &::TMidasEvent::Clear ) );
        
        }
        { //::TMidasEvent::Copy
        
            typedef void ( ::TMidasEvent::*Copy_function_type )( ::TMidasEvent const & ) ;
            
            TMidasEvent_exposer.def( 
                "Copy"
                , Copy_function_type( &::TMidasEvent::Copy )
                , ( bp::arg("arg0") ) );
        
        }
        { //::TMidasEvent::FindBank
        
            typedef int ( ::TMidasEvent::*FindBank_function_type )( char const *,int *,int *,void * * ) const;
            
            TMidasEvent_exposer.def( 
                "FindBank"
                , FindBank_function_type( &::TMidasEvent::FindBank )
                , ( bp::arg("bankName"), bp::arg("bankLength"), bp::arg("bankType"), bp::arg("bankPtr") ) );
        
        }
        { //::TMidasEvent::GetBankList
        
            typedef char const * ( ::TMidasEvent::*GetBankList_function_type )(  ) const;
            
            TMidasEvent_exposer.def( 
                "GetBankList"
                , GetBankList_function_type( &::TMidasEvent::GetBankList ) );
        
        }
        { //::TMidasEvent::GetData
        
            typedef char * ( ::TMidasEvent::*GetData_function_type )(  ) ;
            
            TMidasEvent_exposer.def( 
                "GetData"
                , GetData_function_type( &::TMidasEvent::GetData )
                    /* undefined call policies */ );
        
        }
        { //::TMidasEvent::GetDataSize
        
            typedef ::uint32_t ( ::TMidasEvent::*GetDataSize_function_type )(  ) const;
            
            TMidasEvent_exposer.def( 
                "GetDataSize"
                , GetDataSize_function_type( &::TMidasEvent::GetDataSize ) );
        
        }
        { //::TMidasEvent::GetEventHeader
        
            typedef ::EventHeader_t * ( ::TMidasEvent::*GetEventHeader_function_type )(  ) ;
            
            TMidasEvent_exposer.def( 
                "GetEventHeader"
                , GetEventHeader_function_type( &::TMidasEvent::GetEventHeader )
                    /* undefined call policies */ );
        
        }
        { //::TMidasEvent::GetEventId
        
            typedef ::uint16_t ( ::TMidasEvent::*GetEventId_function_type )(  ) const;
            
            TMidasEvent_exposer.def( 
                "GetEventId"
                , GetEventId_function_type( &::TMidasEvent::GetEventId ) );
        
        }
        { //::TMidasEvent::GetSerialNumber
        
            typedef ::uint32_t ( ::TMidasEvent::*GetSerialNumber_function_type )(  ) const;
            
            TMidasEvent_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::TMidasEvent::GetSerialNumber ) );
        
        }
        { //::TMidasEvent::GetTimeStamp
        
            typedef ::uint32_t ( ::TMidasEvent::*GetTimeStamp_function_type )(  ) const;
            
            TMidasEvent_exposer.def( 
                "GetTimeStamp"
                , GetTimeStamp_function_type( &::TMidasEvent::GetTimeStamp ) );
        
        }
        { //::TMidasEvent::GetTriggerMask
        
            typedef ::uint16_t ( ::TMidasEvent::*GetTriggerMask_function_type )(  ) const;
            
            TMidasEvent_exposer.def( 
                "GetTriggerMask"
                , GetTriggerMask_function_type( &::TMidasEvent::GetTriggerMask ) );
        
        }
        { //::TMidasEvent::IsBank32
        
            typedef bool ( ::TMidasEvent::*IsBank32_function_type )(  ) const;
            
            TMidasEvent_exposer.def( 
                "IsBank32"
                , IsBank32_function_type( &::TMidasEvent::IsBank32 ) );
        
        }
        { //::TMidasEvent::IsGoodSize
        
            typedef bool ( ::TMidasEvent::*IsGoodSize_function_type )(  ) const;
            
            TMidasEvent_exposer.def( 
                "IsGoodSize"
                , IsGoodSize_function_type( &::TMidasEvent::IsGoodSize ) );
        
        }
        { //::TMidasEvent::IterateBank
        
            typedef int ( ::TMidasEvent::*IterateBank_function_type )( ::Bank_t * *,char * * ) const;
            
            TMidasEvent_exposer.def( 
                "IterateBank"
                , IterateBank_function_type( &::TMidasEvent::IterateBank )
                , ( bp::arg("arg0"), bp::arg("pdata") ) );
        
        }
        { //::TMidasEvent::IterateBank32
        
            typedef int ( ::TMidasEvent::*IterateBank32_function_type )( ::Bank32_t * *,char * * ) const;
            
            TMidasEvent_exposer.def( 
                "IterateBank32"
                , IterateBank32_function_type( &::TMidasEvent::IterateBank32 )
                , ( bp::arg("arg0"), bp::arg("pdata") ) );
        
        }
        { //::TMidasEvent::LocateBank
        
            typedef int ( ::TMidasEvent::*LocateBank_function_type )( void const *,char const *,void * * ) const;
            
            TMidasEvent_exposer.def( 
                "LocateBank"
                , LocateBank_function_type( &::TMidasEvent::LocateBank )
                , ( bp::arg("unused"), bp::arg("bankName"), bp::arg("bankPtr") ) );
        
        }
        { //::TMidasEvent::Print
        
            typedef void ( ::TMidasEvent::*Print_function_type )( char const * ) const;
            
            TMidasEvent_exposer.def( 
                "Print"
                , Print_function_type( &::TMidasEvent::Print )
                , ( bp::arg("option")="" ) );
        
        }
        { //::TMidasEvent::SetBankList
        
            typedef int ( ::TMidasEvent::*SetBankList_function_type )(  ) ;
            
            TMidasEvent_exposer.def( 
                "SetBankList"
                , SetBankList_function_type( &::TMidasEvent::SetBankList ) );
        
        }
        { //::TMidasEvent::SetData
        
            typedef void ( ::TMidasEvent::*SetData_function_type )( ::uint32_t,char * ) ;
            
            TMidasEvent_exposer.def( 
                "SetData"
                , SetData_function_type( &::TMidasEvent::SetData )
                , ( bp::arg("dataSize"), bp::arg("dataBuffer") ) );
        
        }
        { //::TMidasEvent::SwapBytes
        
            typedef int ( ::TMidasEvent::*SwapBytes_function_type )( bool ) ;
            
            TMidasEvent_exposer.def( 
                "SwapBytes"
                , SwapBytes_function_type( &::TMidasEvent::SwapBytes )
                , ( bp::arg("arg0") ) );
        
        }
        { //::TMidasEvent::SwapBytesEventHeader
        
            typedef void ( ::TMidasEvent::*SwapBytesEventHeader_function_type )(  ) ;
            
            TMidasEvent_exposer.def( 
                "SwapBytesEventHeader"
                , SwapBytesEventHeader_function_type( &::TMidasEvent::SwapBytesEventHeader ) );
        
        }
        { //::TMidasEvent::operator=
        
            typedef ::TMidasEvent & ( ::TMidasEvent::*assign_function_type )( ::TMidasEvent const & ) ;
            
            TMidasEvent_exposer.def( 
                "assign"
                , assign_function_type( &::TMidasEvent::operator= )
                , ( bp::arg("arg0") )
                , bp::return_self< >() );
        
        }
    }

    bp::class_< TMidasFile >( "TMidasFile", bp::init< >() )    
        .def( 
            "Close"
            , (void ( ::TMidasFile::* )(  ) )( &::TMidasFile::Close ) )    
        .def( 
            "GetFilename"
            , (char const * ( ::TMidasFile::* )(  ) const)( &::TMidasFile::GetFilename ) )    
        .def( 
            "GetLastErrno"
            , (int ( ::TMidasFile::* )(  ) const)( &::TMidasFile::GetLastErrno ) )    
        .def( 
            "GetLastError"
            , (char const * ( ::TMidasFile::* )(  ) const)( &::TMidasFile::GetLastError ) )    
        .def( 
            "Open"
            , (bool ( ::TMidasFile::* )( char const * ) )( &::TMidasFile::Open )
            , ( bp::arg("filename") ) )    
        .def( 
            "Read"
            , (bool ( ::TMidasFile::* )( ::TMidasEvent * ) )( &::TMidasFile::Read )
            , ( bp::arg("event") ) );

    bp::class_< CoincEvent_wrapper, boost::noncopyable >( "CoincEvent", bp::init< midas::Event const &, midas::Event const & >(( bp::arg("event1"), bp::arg("event2") )) )    
        .add_property( "fGamma"
                    , bp::make_function( (::midas::Event const * (*)( ::midas::CoincEvent const & ))(&CoincEvent_wrapper::get_fGamma), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::midas::CoincEvent &,::midas::Event const * ))(&CoincEvent_wrapper::set_fGamma), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .add_property( "fHeavyIon"
                    , bp::make_function( (::midas::Event const * (*)( ::midas::CoincEvent const & ))(&CoincEvent_wrapper::get_fHeavyIon), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::midas::CoincEvent &,::midas::Event const * ))(&CoincEvent_wrapper::set_fHeavyIon), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );

    { //::midas::Event
        typedef bp::class_< midas::Event > Event_exposer_t;
        Event_exposer_t Event_exposer = Event_exposer_t( "Event", bp::init< char const *, void const *, void const *, int >(( bp::arg("tsbank"), bp::arg("header"), bp::arg("data"), bp::arg("size") )) );
        bp::scope Event_scope( Event_exposer );
        bp::class_< midas::Event::CompareId >( "CompareId" )    
            .def( 
                "__call__"
                , (bool ( ::midas::Event::CompareId::* )( ::midas::Event const &,::midas::Event const & ) const)( &::midas::Event::CompareId::operator() )
                , ( bp::arg("lhs"), bp::arg("rhs") ) );
        bp::class_< midas::Event::CompareSerial >( "CompareSerial" )    
            .def( 
                "__call__"
                , (bool ( ::midas::Event::CompareSerial::* )( ::midas::Event const &,::midas::Event const & ) const)( &::midas::Event::CompareSerial::operator() )
                , ( bp::arg("lhs"), bp::arg("rhs") ) );
        bp::class_< midas::Event::CompareTrigger >( "CompareTrigger" )    
            .def( 
                "__call__"
                , (bool ( ::midas::Event::CompareTrigger::* )( ::midas::Event const &,::midas::Event const & ) const)( &::midas::Event::CompareTrigger::operator() )
                , ( bp::arg("lhs"), bp::arg("rhs") ) );
        Event_exposer.def( bp::init< char const *, char *, int >(( bp::arg("tsbank"), bp::arg("buf"), bp::arg("size") )) );
        Event_exposer.def( bp::init< midas::Event const & >(( bp::arg("other") )) );
        { //::midas::Event::CopyHeader
        
            typedef void ( ::midas::Event::*CopyHeader_function_type )( ::EventHeader_t & ) const;
            
            Event_exposer.def( 
                "CopyHeader"
                , CopyHeader_function_type( &::midas::Event::CopyHeader )
                , ( bp::arg("destination") ) );
        
        }
        { //::midas::Event::IsCoinc
        
            typedef bool ( ::midas::Event::*IsCoinc_function_type )( ::midas::Event const & ) const;
            
            Event_exposer.def( 
                "IsCoinc"
                , IsCoinc_function_type( &::midas::Event::IsCoinc )
                , ( bp::arg("other") ) );
        
        }
        { //::midas::Event::PrintCoinc
        
            typedef void ( ::midas::Event::*PrintCoinc_function_type )( ::midas::Event const &,::FILE * ) const;
            
            Event_exposer.def( 
                "PrintCoinc"
                , PrintCoinc_function_type( &::midas::Event::PrintCoinc )
                , ( bp::arg("other"), bp::arg("where")=__stdoutp ) );
        
        }
        { //::midas::Event::PrintSingle
        
            typedef void ( ::midas::Event::*PrintSingle_function_type )( ::FILE * ) const;
            
            Event_exposer.def( 
                "PrintSingle"
                , PrintSingle_function_type( &::midas::Event::PrintSingle )
                , ( bp::arg("where")=__stdoutp ) );
        
        }
        { //::midas::Event::ReadFromFile
        
            typedef bool ( ::midas::Event::*ReadFromFile_function_type )( ::TMidasFile & ) ;
            
            Event_exposer.def( 
                "ReadFromFile"
                , ReadFromFile_function_type( &::midas::Event::ReadFromFile )
                , ( bp::arg("file") ) );
        
        }
        { //::midas::Event::TimeDiff
        
            typedef double ( ::midas::Event::*TimeDiff_function_type )( ::midas::Event const & ) const;
            
            Event_exposer.def( 
                "TimeDiff"
                , TimeDiff_function_type( &::midas::Event::TimeDiff )
                , ( bp::arg("other") ) );
        
        }
        { //::midas::Event::TriggerTime
        
            typedef double ( ::midas::Event::*TriggerTime_function_type )(  ) const;
            
            Event_exposer.def( 
                "TriggerTime"
                , TriggerTime_function_type( &::midas::Event::TriggerTime ) );
        
        }
        Event_exposer.def( bp::self < bp::self );
        { //::midas::Event::operator=
        
            typedef ::midas::Event & ( ::midas::Event::*assign_function_type )( ::midas::Event const & ) ;
            
            Event_exposer.def( 
                "assign"
                , assign_function_type( &::midas::Event::operator= )
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
    }
}
